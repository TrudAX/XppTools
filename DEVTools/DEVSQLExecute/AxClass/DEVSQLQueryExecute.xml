<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVSQLQueryExecute</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DEVSQLQueryExecute
{
    DEVSQLExecuteParm        executeParm;

    

    boolean                 isRawOutput;
    DEVSQLQueryExecuteLog   queryExecuteLog;

    TextBuffer              textBuffer;
    DEVSQLFileWriterExcel   fileWriterExcel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmExecuteParm</Name>
				<Source><![CDATA[
    public DEVSQLExecuteParm parmExecuteParm(DEVSQLExecuteParm _executeParm = executeParm)
    {
        executeParm = _executeParm;
        return executeParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static DEVSQLQueryExecute  construct(DEVSQLExecuteParm _executeParm)
    {
        DEVSQLQueryExecute      queryExecute = new DEVSQLQueryExecute();
        queryExecute.parmExecuteParm(_executeParm);
    
        return queryExecute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBegin</Name>
				<Source><![CDATA[
    void logBegin()
    {
        ttsbegin;
        queryExecuteLog.clear();
        select firstonly forupdate queryExecuteLog
            where queryExecuteLog.SQLText   == executeParm.SQLText &&
                  queryExecuteLog.CreatedBy == curUserId();

        queryExecuteLog.SQLText = executeParm.SQLText;
        queryExecuteLog.StartDateTime = DateTimeUtil::getSystemDateTime();
        queryExecuteLog.QueryExecuteMode = executeParm.QueryExecuteMode;
        queryExecuteLog.EndDateTime = utcDateTimeNull();
        queryExecuteLog.FormatParameters = executeParm.FormatParameters;
        queryExecuteLog.ExecCount++;
        queryExecuteLog.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEnd</Name>
				<Source><![CDATA[
    void logEnd()
    {
        ;
        ttsbegin;
        queryExecuteLog = DEVSQLQueryExecuteLog::findRecId(queryExecuteLog.RecId, true);
        queryExecuteLog.EndDateTime = DateTimeUtil::getSystemDateTime();
        queryExecuteLog.Duration = any2Int(DateTimeUtil::getDifference(queryExecuteLog.EndDateTime, queryExecuteLog.StartDateTime));
        queryExecuteLog.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execSQL</Name>
				<Source><![CDATA[
    public str execSQL()
    {
        str  res;
       
        str  resRow;
        textBuffer = new TextBuffer();

        this.logBegin();

        //str fileExt = conPeek(fileNameSplit(executeParm.Filename), 3);
        //if (fileExt != '.html')
        //{
        //    isRawOutput = true;
        //}
        if (executeParm.QueryExecuteMode == DEVSQLQueryExecuteMode::Select)
        {
            if (executeParm.OutputType == DEVSQLOutputType::Excel)
            {
                fileWriterExcel = new DEVSQLFileWriterExcel();
                fileWriterExcel.parmWorkSheetNameStr(executeParm.Filename);
                this.doExecuteQueryResultExcel();
            }
            else
            {
                this.doExecuteQueryResult();
            }
            resRow = textBuffer.getText();
            if ( isRawOutput)
            {
                res = resRow;
            }
            else
            {
                res = '<!DOCTYPE html>\n <html><body><table>' + resRow + '</table></body></html>';
            }
            //res = executeParm.SQLText;
        
            if (executeParm.OutputType == DEVSQLOutputType::HTML)
            {
                File::SendStringAsFileToUser(res, executeParm.getFilename());
            }
            if (executeParm.OutputType == DEVSQLOutputType::Excel)
            {
                fileWriterExcel.createExcelDocument();

                fileWriterExcel.doExcelOutput('A1');
                fileWriterExcel.excelMarkAsBorderAll();

                /*
                for(i = 1; i <= conLen(_typeCommentInfo); i++)
                {
                    [t, comment] = conPeek(_typeCommentInfo, i);
                    fileWriterExcel.excelSetColumnFormat(i, t);
                    if (comment)
                    {

                        this.excelSetCellComment(this.getStartRow(), i,
                            comment);
                    }
                }
                */

                fileWriterExcel.finishOutput();
            }
        }
        else
        {
            if (executeParm.QueryExecuteMode == DEVSQLQueryExecuteMode::Update)
            {
                DEVSQLExecuteResult  executeResultLocal;

                if (executeParm.OutputType != DEVSQLOutputType::Screen)
                {
                    ttsbegin;
                    executeResultLocal = DEVSQLExecuteResult::find(curUserId(), true);
                    executeResultLocal.SQLResults = '';
                    executeResultLocal.update();
                    ttscommit;
                }

                this.doExecuteUpdate(executeParm.SQLText);
                res = strFmt('Executed %1, %2', 
                    DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()),
                    curUserId());

                if (executeParm.OutputType == DEVSQLOutputType::HTML)
                {
                    executeResultLocal = DEVSQLExecuteResult::find(curUserId());
                    if (executeResultLocal.SQLResults)
                    {
                        File::SendStringAsFileToUser(executeResultLocal.SQLResults, executeParm.getFilename());
                    }
                }
            }
        }
        this.logEnd();
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteUpdate</Name>
				<Source><![CDATA[
    public void doExecuteUpdate(str _strQuery)
    {
        Connection  connection = new Connection();
        Statement   statement = connection.createStatement();
        SqlStatementExecutePermission permission;
                     
        permission = new SqlStatementExecutePermission(_strQuery);
        permission.assert();

        Map paramMap = SqlParams::create();
        statement.executeUpdateWithParameters(_strQuery, paramMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultSet</Name>
				<Source><![CDATA[
    private ResultSet getResultSet(str _strQuery)
    {
        Connection  connection = new Connection();
        Statement   statement = connection.createStatement();
        SqlStatementExecutePermission permission;
        ResultSet resultSet;
          
           
        permission = new SqlStatementExecutePermission(_strQuery);
        permission.assert();

        Map paramMap = SqlParams::create();
        resultSet = statement.executeQueryWithParameters(_strQuery, paramMap);

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResultRow</Name>
				<Source><![CDATA[
    void  addResultRow(container _row, boolean _isHeader = false)
    {
        int i;
        textBuffer.appendText('<tr style="border: 1px  solid gray; padding: 1px;">');
        for (i = 1; i <= conLen(_row); i++)
        {
            if (_isHeader)
            {
                textBuffer.appendText(strFmt('<th style="border: 1px  solid gray; padding: 1px;">%1</th>', conPeek(_row, i)));
            }
            else
            {
                textBuffer.appendText(strFmt('<td style="border: 1px  solid gray; padding: 1px;">%1</td>', conPeek(_row, i)));
            }
        }
        textBuffer.appendText('</tr>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteQueryResultExcel</Name>
				<Source><![CDATA[
    public void doExecuteQueryResultExcel()
    {
        int         i, j;
        container   expectedSubResult;
        ResultSet   resultSet;
        ResultSetMetaData  resultSetMetaData;
        boolean     isFirstRow = true;
        int         maxColumnCount;
        int         currentRow;
        Map         columnTypesMap = new Map(Types::Integer, Types::Integer);
        Map         enumTypesMap = new Map(Types::String, Types::String);
        Set         enumColumnSet = new Set(Types::Integer);
        Set         dateTimeColumnSet = new Set(Types::Integer);
        Set         dateColumnSet = new Set(Types::Integer);
        container   tableNamesCon;
        int curTab;
        ;

        if (executeParm.FormatParameters)
        {
            tableNamesCon = str2con_RU(strReplace(executeParm.FormatParameters, ' ', ''), ',');
        }
        resultSet = this.getResultSet(executeParm.SQLText);
        resultSetMetaData = resultSet.getMetaData();

        while(resultSet.next())
        {
            currentRow++;
            if (currentRow > executeParm.MaxRows)
            {
                warning(strFmt("Exceeding the allowed number of lines %1", executeParm.MaxRows));
                break;
            }
            //print row headers
            if (isFirstRow)
            {
                expectedSubResult = connull();
                for ( i = 1; i <= resultSetMetaData.getColumnCount(); i++)
                {
                    str  columnName = resultSetMetaData.getColumnName(i);
                    expectedSubResult += columnName;

                    DictTable   dictTable;
                    DictField   dictField;
                    DictEnum    dictEnum;
                    for(curTab = 1; curTab <= conLen(tableNamesCon); curTab++)
                    {
                        dictTable = new DictTable(tableName2Id(conPeek(tableNamesCon, curTab)));
                        if (dictTable)
                        {
                            FieldId  fieldId = dictTable.fieldName2Id(columnName);
                            if (fieldId)
                            {
                                dictField = dictTable.fieldObject(fieldId);
                                if (dictField.baseType() == Types::Enum && dictField.enumId())
                                {
                                    enumColumnSet.add(i);
                                    dictEnum = new DictEnum(dictField.enumId());
                                    for (j = 0; j < dictEnum.values(); j++)  //CustInvoiceJour.SalesType starts from 0
                                    {
                                        enumTypesMap.insert(strFmt('%1:%2',i, dictEnum.index2Value(j)),  dictEnum.index2Label(j));
                                    }
                                    info(strFmt("Enum transformation %1.%2 is applied to %3(%4) field",
                                        dictTable.name(), dictField.name(), columnName, i));
                                }
                                if (dictField.baseType() == Types::UtcDateTime)
                                {
                                    dateTimeColumnSet.add(i);
                                    info(strFmt("DateTime transformation %1.%2 is applied to %3(%4) field",
                                        dictTable.name(), dictField.name(), columnName, i));
                                }
                                if (dictField.baseType() == Types::Date)
                                {
                                    dateColumnSet.add(i);
                                    //info(strFmt("DateTime transformation %1.%2 is applied to %3(%4) field",
                                    //    dictTable.name(), dictField.name(), columnName, i));
                                }
                            }
                        }
                    }

                    //info(strFmt("Name:%1, Types:%2", resultSetMetaData.getColumnName(i), resultSetMetaData.getColumnType(i)));

                    columnTypesMap.insert(i, resultSetMetaData.getColumnType(i));
                }
                this.addResultRow(expectedSubResult, true);
                
                fileWriterExcel.addContainerLine(expectedSubResult);
                fileWriterExcel.markRowAsBold();
                
                isFirstRow = false;

                maxColumnCount = resultSetMetaData.getColumnCount();
            }
            expectedSubResult = connull();
            str     sTmp;
            for ( i = 1; i <= maxColumnCount; i++)
            {
                //int colType = resultSetMetaData.getColumnType(i);
                Types t = columnTypesMap.lookup(i);
                switch (t)
                {
                    case Types::Real:
                        real realTmp = resultSet.getReal(i);
                        expectedSubResult += realTmp;
                        break;
                    case Types::Integer:
                        int intTmp = resultSet.getInt(i);
                        if (enumColumnSet.in(i))
                        {
                            if (enumTypesMap.exists(strFmt('%1:%2',i, intTmp)))
                            {
                                sTmp = enumTypesMap.lookup(strFmt('%1:%2',i, intTmp));
                            }
                            else
                            {
                                sTmp = strFmt('%1', intTmp);
                            }
                            expectedSubResult += sTmp;
                        }
                        else
                        {
                            expectedSubResult += intTmp;
                        }

                        break;
                    case Types::Date:
                        if (dateTimeColumnSet.in(i))
                        {
                            TransDateTime  tdt = resultSet.getDateTime(i);
                            if (tdt != utcDateTimeNull())
                            {
                                tdt = DateTimeUtil::applyTimeZoneOffset(tdt, DateTimeUtil::getUserPreferredTimeZone());
                            }
                            expectedSubResult += tdt;
                        }
                        else
                        {
                            if (dateColumnSet.in(i))
                            {
                                TransDate td = resultSet.getDate(i);
                                expectedSubResult += td;
                            }
                            else
                            {
                                sTmp = resultSet.getString(i);
                                expectedSubResult += sTmp;
                            }
                        }
                        break;
                    default:
                        sTmp = resultSet.getString(i);
                        expectedSubResult += sTmp;
                }
                
            }
            fileWriterExcel.addContainerLine(expectedSubResult);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteQueryResult</Name>
				<Source><![CDATA[
    public void doExecuteQueryResult()
    {
        int         i;
        container   expectedSubResult;
        ResultSet   resultSet;
        ResultSetMetaData  resultSetMetaData;
        boolean     isFirstRow = true;
        int         maxColumnCount;
        int         currentRow;        
        ;

        resultSet = this.getResultSet(executeParm.SQLText);
        resultSetMetaData = resultSet.getMetaData();

        while(resultSet.next())
        {
            currentRow++;
            if (currentRow > executeParm.MaxRows)
            {
                warning(strFmt("Exceeding the allowed number of lines %1", executeParm.MaxRows));
                break;
            }
            if (isRawOutput)
            {
                if (isFirstRow)
                {
                    isFirstRow = false;
                    maxColumnCount = resultSetMetaData.getColumnCount();
                }
                else
                {
                    textBuffer.appendText('\n');
                }
                for ( i = 1; i <= maxColumnCount; i++)
                {
                    str     sTmp = resultSet.getString(i);
                    if (i > i)
                    {
                        textBuffer.appendText(',');
                    }
                    textBuffer.appendText(strFmt('%1', sTmp));
                }
            }
            else
            {
                //print row headers
                if (isFirstRow)
                {
                    expectedSubResult = connull();
                    for ( i = 1; i <= resultSetMetaData.getColumnCount(); i++)
                    {
                        expectedSubResult += resultSetMetaData.getColumnName(i);
                    }
                    this.addResultRow(expectedSubResult, true);

                    isFirstRow = false;

                    maxColumnCount = resultSetMetaData.getColumnCount();
                }
                textBuffer.appendText('<tr style="border: 1px  solid gray; padding: 1px;">');
                for ( i = 1; i <= maxColumnCount; i++)
                {
                    //int colType = resultSetMetaData.getColumnType(i);
                    //Types t = colType;
                    str     sTmp = resultSet.getString(i);

                    textBuffer.appendText(strFmt('<td style="border: 1px  solid gray; padding: 1px;">%1</td>', sTmp));
                }
                textBuffer.appendText('</tr>');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>