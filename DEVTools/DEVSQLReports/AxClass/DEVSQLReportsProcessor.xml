<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVSQLReportsProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DEVSQLReportsProcessor
{
    DEVSQLReports   SQLReports;

    DEVSQLReportExecutionLog  reportExecutionLog;

    DEVSQLReportFormat     reportFormat;
    DEVSQLReportDefinition reportDefinition;


    int                     curCellPosition;
    TextStreamIo            ioData;
    str                     resRow;

    TextBuffer              textBuffer;
    str                     reportDelimeter;
    int                     currentRow;

    container               savedParmsCon;
    DEVSQLFileWriterExcel   fileWriterExcelGlobal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSQLReports</Name>
				<Source><![CDATA[
    public DEVSQLReports parmSQLReports(DEVSQLReports _SQLReports = SQLReports)
    {
        SQLReports = _SQLReports;
        return SQLReports;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport(DEVSQLReports _SQLReports, container _parameters)
    {
        savedParmsCon = _parameters;

        this.parmSQLReports(_SQLReports);
        
        this.createProcessLogRecord();

        int         infoCnt ;
        infoCnt = infologLine();
        boolean isErrorCaught       = false;
        
        DEVSQLReportExecutionStatus curMessageStatus    = reportExecutionLog.Status;

        try
        {
            this.doLogProcessing();

            this.sendOutputStream();

            curMessageStatus = DEVSQLReportExecutionStatus::Completed;
        }
        catch
        {
            isErrorCaught   = true;
        }

        if (isErrorCaught)
        {
            curMessageStatus = DEVSQLReportExecutionStatus::Error;
        }

        ttsbegin;
        DEVSQLReportExecutionLog  reportExecutionLogUpd;

        reportExecutionLogUpd = DEVSQLReportExecutionLog::findRecId(reportExecutionLog.RecId, true);
        if (reportExecutionLogUpd.RecId)
        {
            reportExecutionLogUpd.Status                = curMessageStatus;
            reportExecutionLogUpd.EndDateTime           = DateTimeUtil::getSystemDateTime();
            reportExecutionLogUpd.Duration              = any2Int(DateTimeUtil::getDifference(reportExecutionLogUpd.EndDateTime, reportExecutionLog.StartDateTime));
            reportExecutionLogUpd.insertErrorByMessage(infoCnt);

            reportExecutionLogUpd.Rows = currentRow;
            reportExecutionLogUpd.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessLogRecord</Name>
				<Source><![CDATA[
    void createProcessLogRecord()
    {
        reportExecutionLog = null;
        reportExecutionLog.initValue();
        reportExecutionLog.initFromSQLReport(DEVSQLReports::find(SQLReports.ReportId));
        reportExecutionLog.StartDateTime = DateTimeUtil::getSystemDateTime();
        reportExecutionLog.Status        = DEVSQLReportExecutionStatus::InProgress;
        reportExecutionLog.ParametersCon = savedParmsCon;
        reportExecutionLog.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultSet</Name>
				<Source><![CDATA[
    private ResultSet getResultSet(str _strQuery)
    {
        Connection  connection = new Connection();
        Statement   statement = connection.createStatement();
        SqlStatementExecutePermission permission;
        ResultSet resultSet;
          
        
        permission = new SqlStatementExecutePermission(_strQuery);
        permission.assert();

        
        Map paramMap = SqlParams::create();
        
        int     i;
        for(i = 1; i<= conLen(savedParmsCon); i++)
        {
            str                         savedName;
            DEVSQLDefinitionParmType    savedType;
            anytype                     savedValue;

            [savedName, savedType, savedValue] = conPeek(savedParmsCon, i);

            if (savedName)
            {
                paramMap.add(savedName, savedValue);
            }
        }
        resultSet = statement.executeQueryWithParameters(_strQuery, paramMap);

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendOutputStream</Name>
				<Source><![CDATA[
    public void sendOutputStream()
    {
        System.IO.MemoryStream memoryStream;

        if (reportFormat.FileOutputType == DEVSQLFileOutputType::Text)
        {
            #File

            ioData = TextStreamIo::constructForWrite(0);//65001);
            ioData.inFieldDelimiter(reportFormat.Delimiter);
            ioData.outFieldDelimiter(reportFormat.Delimiter);
            ioData.inRecordDelimiter(#delimiterCRLF);

            ioData.writeRaw(resRow);

            memoryStream = ioData.getStream();
        }
        if (reportFormat.FileOutputType == DEVSQLFileOutputType::Excel)
        {
            memoryStream = fileWriterExcelGlobal.finishOutputGetStream();
        }
        if (reportDefinition.IsSaveReportInLog)
        {
            ttsbegin;
            DEVSQLReportExecutionLog reportExecutionLogUpd = DEVSQLReportExecutionLog::findRecId(reportExecutionLog.RecId, true);
            if (reportExecutionLogUpd.RecId)
            {
                System.IO.MemoryStream memoryStream2 = new System.IO.MemoryStream();
                memoryStream.Position = 0;
                memoryStream.CopyTo(memoryStream2);
                reportExecutionLogUpd.FileData = this.getFileDataFromStream(memoryStream2);
                reportExecutionLogUpd.update();
            }
            ttscommit;
        }
        //if (reportExecutionLogUpd.FileData != conNull())
        if (memoryStream.Length > 0)
        {
            //memoryStream.Position = 0;
            File::SendFileToUser(memoryStream, reportExecutionLog.Filename);
        }
        else
        {
            warning(strFmt("Report %1 is empty", reportExecutionLog.ReportId));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileDataFromStream</Name>
				<Source><![CDATA[
    protected container getFileDataFromStream(System.IO.MemoryStream  _memoryStream)
    {
        container res;

        _memoryStream.Position = 0;
        if (_memoryStream.Length)
        {
            Binary  b = Binary::constructFromMemoryStream(_memoryStream);
            if (b)
            {
                res = b.getContainer();
            }
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doLogProcessing</Name>
				<Source><![CDATA[
    public void doLogProcessing()
    {
        resRow = '';
        reportFormat     = DEVSQLReportFormat::find(reportExecutionLog.ReportFormatId);
        reportDefinition = DEVSQLReportDefinition::find(reportExecutionLog.ReportDefinitionId);

        //str fileExt = conPeek(fileNameSplit(reportExecutionLog.Filename), 3);

        reportDelimeter = reportFormat.Delimiter;
        if (reportDelimeter == 'Tab')
        {
            reportDelimeter = '\t';
        }

        if (reportFormat.FileOutputType == DEVSQLFileOutputType::Text)
        {
            this.doExecuteQueryResult();
        }
        if (reportFormat.FileOutputType == DEVSQLFileOutputType::Excel)
        {
            fileWriterExcelGlobal = this.doExecuteQueryResultExcel();
        }

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteQueryResultExcel</Name>
				<Source><![CDATA[
    public DEVSQLFileWriterExcel doExecuteQueryResultExcel()
    {
        int         i, j;
        container   expectedSubResult;
        ResultSet   resultSet;
        ResultSetMetaData  resultSetMetaData;
        boolean     isFirstRow = true;
        int         maxColumnCount;
        Map         columnTypesMap = new Map(Types::Integer, Types::Integer);
        Map         enumTypesMap = new Map(Types::String, Types::String);
        Set         enumColumnSet = new Set(Types::Integer);
        Set         dateTimeColumnSet = new Set(Types::Integer);
        Set         dateColumnSet = new Set(Types::Integer);
        container   tableNamesCon;
        int curTab;
        DEVSQLFileWriterExcel  fileWriterExcel;
        ;
        if (reportDefinition.FormatParameters)
        {
            tableNamesCon = str2con_RU(strReplace(reportDefinition.FormatParameters, ' ', ''), ',');
        }

        fileWriterExcel = new DEVSQLFileWriterExcel();
        fileWriterExcel.parmWorkSheetNameStr(reportExecutionLog.Filename);

        currentRow = 0;

        resultSet = this.getResultSet(reportExecutionLog.SQLText);
        resultSetMetaData = resultSet.getMetaData();

        while(resultSet.next())
        {
            currentRow++;
            if (reportDefinition.MaxRows && currentRow > reportDefinition.MaxRows)
            {
                warning(strFmt("Exceeding the allowed number of lines %1", reportDefinition.MaxRows));
                break;
            }
            //print row headers
            if (isFirstRow)
            {
                expectedSubResult = connull();
                for ( i = 1; i <= resultSetMetaData.getColumnCount(); i++)
                {
                    str  columnName = resultSetMetaData.getColumnName(i);
                    expectedSubResult += columnName;

                    DictTable   dictTable;
                    DictField   dictField;
                    DictEnum    dictEnum;
                    for(curTab = 1; curTab <= conLen(tableNamesCon); curTab++)
                    {
                        dictTable = new DictTable(tableName2Id(conPeek(tableNamesCon, curTab)));
                        if (dictTable)
                        {
                            FieldId  fieldId = dictTable.fieldName2Id(columnName);
                            if (fieldId)
                            {
                                dictField = dictTable.fieldObject(fieldId);
                                if (dictField.baseType() == Types::Enum && dictField.enumId())
                                {
                                    enumColumnSet.add(i);
                                    dictEnum = new DictEnum(dictField.enumId());
                                    for (j = 0; j < dictEnum.values(); j++)
                                    {
                                        enumTypesMap.insert(strFmt('%1:%2',i, dictEnum.index2Value(j)),  dictEnum.index2Label(j));
                                    }
                                    info(strFmt("Enum transformation %1.%2 is applied to %3(%4) field",
                                        dictTable.name(), dictField.name(), columnName, i));
                                }
                                if (dictField.baseType() == Types::UtcDateTime)
                                {
                                    dateTimeColumnSet.add(i);
                                    info(strFmt("DateTime transformation %1.%2 is applied to %3(%4) field",
                                        dictTable.name(), dictField.name(), columnName, i));
                                }
                                if (dictField.baseType() == Types::Date)
                                {
                                    dateColumnSet.add(i);
                                    //info(strFmt("DateTime transformation %1.%2 is applied to %3(%4) field",
                                    //    dictTable.name(), dictField.name(), columnName, i));
                                }
                            }
                        }
                    }

                    columnTypesMap.insert(i, resultSetMetaData.getColumnType(i));
                }
                //this.addResultRow(expectedSubResult, true);
                
                fileWriterExcel.addContainerLine(expectedSubResult);
                fileWriterExcel.markRowAsBold();
                
                isFirstRow = false;

                maxColumnCount = resultSetMetaData.getColumnCount();
            }
            expectedSubResult = connull();
            str     sTmp;
            for ( i = 1; i <= maxColumnCount; i++)
            {
                //int colType = resultSetMetaData.getColumnType(i);
                Types t = columnTypesMap.lookup(i);
                switch (t)
                {
                    case Types::Real:
                        real realTmp = resultSet.getReal(i);
                        expectedSubResult += realTmp;
                        break;
                    case Types::Integer:
                        int intTmp = resultSet.getInt(i);
                        if (enumColumnSet.in(i))
                        {
                            if (enumTypesMap.exists(strFmt('%1:%2',i, intTmp)))
                            {
                                sTmp = enumTypesMap.lookup(strFmt('%1:%2',i, intTmp));
                            }
                            else
                            {
                                sTmp = strFmt('%1', intTmp);
                            }
                            expectedSubResult += sTmp;
                        }
                        else
                        {
                            expectedSubResult += intTmp;
                        }

                        break;
                    case Types::Date:
                        if (dateTimeColumnSet.in(i))
                        {
                            TransDateTime  tdt = resultSet.getDateTime(i);
                            if (tdt != utcDateTimeNull())
                            {
                                tdt = DateTimeUtil::applyTimeZoneOffset(tdt, DateTimeUtil::getUserPreferredTimeZone());
                            }
                            expectedSubResult += tdt;
                        }
                        else
                        {
                            if (dateColumnSet.in(i))
                            {
                                TransDate td = resultSet.getDate(i);
                                expectedSubResult += td;
                            }
                            else
                            {
                                sTmp = resultSet.getString(i);
                                expectedSubResult += sTmp;
                            }
                        }
                        break;
                    default:
                        sTmp = resultSet.getString(i);
                        expectedSubResult += sTmp;
                }
                
            }
            fileWriterExcel.addContainerLine(expectedSubResult);

        }
        fileWriterExcel.createExcelDocument();

        fileWriterExcel.doExcelOutput('A1');
        fileWriterExcel.excelMarkAsBorderAll();

        return fileWriterExcel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResultRow</Name>
				<Source><![CDATA[
    void  addResultRow(container _row, boolean _isHeader = false)
    {
        int i;
        if (! reportFormat.IsIncludeHeader && _isHeader)
        {
            return;
        }

        for (i = 1; i <= conLen(_row); i++)
        {
            str  cellData = conPeek(_row, i);
            curCellPosition++;
            if (curCellPosition > 1)
            {
                textBuffer.appendText(reportDelimeter);
            }
            textBuffer.appendText(cellData);
        }
        textBuffer.appendText('\n');
        curCellPosition = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteQueryResult</Name>
				<Source><![CDATA[
    public void doExecuteQueryResult()
    {
        int         i;
        container   expectedSubResult;
        ResultSet   resultSet;
        ResultSetMetaData  resultSetMetaData;
        boolean     isFirstRow = true;
        int         maxColumnCount;
        
        ;
        textBuffer = new TextBuffer();

        resultSet = this.getResultSet(reportExecutionLog.SQLText);
        resultSetMetaData = resultSet.getMetaData();
        currentRow = 0;
        /*
        CustTrans  custTrans;

        while select custTrans
        {
            str s = custTrans.AccountNum;
        }
        return;
*/
        while(resultSet.next())
        {
            currentRow++;
            if (reportDefinition.MaxRows && currentRow > reportDefinition.MaxRows)
            {
                warning(strFmt("Exceeding the allowed number of lines %1", reportDefinition.MaxRows));
                break;
            }
            //print row headers
            if (isFirstRow)
            {
                expectedSubResult = connull();
                for ( i = 1; i <= resultSetMetaData.getColumnCount(); i++)
                {
                    expectedSubResult += resultSetMetaData.getColumnName(i);
                }
                this.addResultRow(expectedSubResult, true);
                isFirstRow = false;

                maxColumnCount = resultSetMetaData.getColumnCount();
            }
            else
            {
                textBuffer.appendText('\n');
                curCellPosition = 0;
            }
            str     sTmp;
            for ( i = 1; i <= maxColumnCount; i++)
            {
                sTmp = resultSet.getString(i);

                curCellPosition++;
                if (curCellPosition > 1)
                {
                    textBuffer.appendText(reportDelimeter);
                }
                textBuffer.appendText(sTmp);

            }

        }
        resRow = textBuffer.getText();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>