<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVSQLReportsProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DEVSQLReportsProcess extends RunBaseBatch implements BatchRetryable
{
    DEVSQLReportId                  reportId;
    DEVSQLReportDefinitionId        reportDefinitionId;
    
    DialogField      dlgReportId;
    
    DEVSQLReports   callerReports;

    NoYesId      isDisableUnpackQuery;

    Map          dialogControlsMap;
    int          dialogControlsNum;

    container   savedParmsCon;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        reportId,
        savedParmsCon
    #endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        DEVSQLReportDefinitionParms     reportDefinitionParms;
        DEVSQLReportExecutionLog        reportExecutionLog;
        DEVSQLReportDefinition          reportDefinition;
        Name                            edtName;
   
        ;
        dlgReportId  = dialog.addFieldValue(extendedtypestr(DEVSQLReportId), reportId);
        dlgReportId.allowEdit(false);

        reportDefinitionId = DEVSQLReports::find(reportId).ReportDefinitionId;
        reportDefinition = DEVSQLReportDefinition::find(reportDefinitionId);

        select firstonly reportExecutionLog
            order by CreatedDateTime desc
            where reportExecutionLog.CreatedBy == curUserId() && 
                  reportExecutionLog.ReportId  == reportId;
        
        dialogControlsMap = new Map(Types::Integer, Types::Class);
        dialogControlsNum = 0;

        while select reportDefinitionParms
            order by Position
            where reportDefinitionParms.ReportDefinitionId == reportDefinitionId
        {
            dialogControlsNum++;
            if (! reportDefinitionParms.EDTName || ! extendedTypeName2Id(reportDefinitionParms.EDTName))
            {
                edtName = reportDefinitionParms.defaultEDTName();
            }
            else
            {
                edtName = reportDefinitionParms.EDTName;
            }

            str                         savedName;
            DEVSQLDefinitionParmType    savedType;
            anytype                     savedValue;        
            if (reportDefinition.IsDisplayLastUsedDialogParms)
            {
                if (conLen(reportExecutionLog.ParametersCon) >= dialogControlsNum)
                {
                    [savedName, savedType, savedValue] = conPeek(reportExecutionLog.ParametersCon, dialogControlsNum);
                }
            }
            if (! savedName || ! savedValue || savedType != reportDefinitionParms.Type)
            {
                savedValue =  reportDefinitionParms.defaultParmValue();
            }

            DialogField  df;
            df = dialog.addFieldValue(edtName, savedValue, reportDefinitionParms.Label, reportDefinitionParms.HelpText);

            
            dialogControlsMap.insert(reportDefinitionParms.Position, df);
        }
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        DEVSQLReportDefinitionParms     reportDefinitionParms;
        ;
        reportId   = dlgReportId.value();
        
        savedParmsCon = conNull();

        while select reportDefinitionParms
            order by Position
            where reportDefinitionParms.ReportDefinitionId == reportDefinitionId
        {
            DialogField  df;
            df = dialogControlsMap.lookup(reportDefinitionParms.Position);

            savedParmsCon += [[reportDefinitionParms.Name, reportDefinitionParms.Type, df.value()]];
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    public DEVSQLReportId parmReportId(DEVSQLReportId _reportId = reportId)
    {
        reportId = _reportId;
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerDEVSQLReports</Name>
				<Source><![CDATA[
    public DEVSQLReports parmCallerDEVSQLReports(DEVSQLReports _callerDEVSQLReports = callerReports)
    {
        callerReports = _callerDEVSQLReports;

        reportId = callerReports.ReportId;
        return callerReports;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDisableUnpackQuery</Name>
				<Source><![CDATA[
    public NoYesId parmIsDisableUnpackQuery(NoYesId _isDisableUnpackQuery = isDisableUnpackQuery)
    {
        isDisableUnpackQuery = _isDisableUnpackQuery;
        return isDisableUnpackQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version    version = RunBase::getVersion(_packedClass);

        if (isDisableUnpackQuery)
        {
            return false;
        }

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        DEVSQLReports    DEVSQLReports;
        DEVSQLReportsProcessor  reportsProcessor;

        DEVSQLReports = DEVSQLReports::find(reportId);
        
        reportsProcessor = new DEVSQLReportsProcessor();
        reportsProcessor.processReport(DEVSQLReports, savedParmsCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;  //just for now
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DEVSQLReportsProcess construct()
    {
        return new DEVSQLReportsProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "Execute SQL report";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DEVSQLReportsProcess    runObject = DEVSQLReportsProcess::construct();
        ;
        if (_args.dataset() != tablenum(DEVSQLReports))
        {
            throw error(Error::missingRecord(funcname()));
        }
        runObject.parmCallerDEVSQLReports(_args.record());

        runObject.parmIsDisableUnpackQuery(true);

        if (runObject.prompt())
        {
            runObject.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>