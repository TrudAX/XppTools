<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegExportDocumentsLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DEVIntegExportDocumentsLog extends RunBaseBatch
{
    PositiveNumber         dummy;
    DEVIntegExportDocumentLog     exportDocumentLogCaller;

    QueryRun            queryRun;

    DialogField            dlgDummy;

    DEVIntegMessagesLoadAzureServiceBus     loadAzureServiceBusCache;
    str                                     loadAzureServiceBusCacheKey;

    DEVIntegMessagesLoadBaseType     loadMessagesFileTypeCache;
    str                              loadMessagesFileTypeCacheKey;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dummy
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        ;
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        ;
    
        this.initQuery();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         qBR;
        ;
        qbds = query.addDataSource(tablenum(DEVIntegMessageTypeTableOutbound));
        qBR = SysQuery::findOrCreateRange(qbds, fieldnum(DEVIntegMessageTypeTableOutbound, IsEnabled));
        qBR.status(RangeStatus::Locked);
        qBR.value(SysQuery::value(NoYes::Yes));

        qbds = qbds.addDataSource(tablenum(DEVIntegExportDocumentLog));
        qbds.relations(true);
        qBR = SysQuery::findOrCreateRange(qbds, fieldnum(DEVIntegExportDocumentLog, ExportStatus));
        qBR.status(RangeStatus::Locked);
        qBR.value(SysQuery::value(DEVIntegExportStatus::ToSend));
    
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        ;
    
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDummy</Name>
				<Source><![CDATA[
    public PositiveNumber parmDummy(PositiveNumber _dummy = dummy)
    {
        ;
    
        dummy = _dummy;
    
        return dummy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentLogCaller</Name>
				<Source><![CDATA[
    public DEVIntegExportDocumentLog parmExportDocumentLogCaller(DEVIntegExportDocumentLog _exportDocumentLogCaller = exportDocumentLogCaller)
    {
        ;
    
        exportDocumentLogCaller = _exportDocumentLogCaller;
    
        return exportDocumentLogCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        ;
    
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExportDocumentLog</Name>
				<Source><![CDATA[
    public void processExportDocumentLog(DEVIntegExportDocumentLog _exportDocumentLog, DEVIntegMessageTypeTableOutbound  _messageTypeTableOutbound)
    {
        DEVIntegExportDocumentLog    exportDocumentLogUpd;
        DEVIntegExportMessageBase    exportMessageBase;
        RefRecId                     refRecIf;
        str                          loadAzureServiceBusCacheKeyLocal;
        CompanyId                    companyId;
        boolean                     isErrorCaught;
        Exception                   exception = Exception::Info;
        int                         infoCnt ;
        DEVIntegMessageProcessResult  processResults = DEVIntegMessageProcessResult::construct();
        
        System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
        stopwatch.Start();

        companyId = _exportDocumentLog.CompanyId;
        if (! xDataArea::exist(companyId))
        {
            companyId = curExt();
        }
        changecompany(companyId)
        {
            exportMessageBase = _messageTypeTableOutbound.getActionClass();
            exportMessageBase.parmProcessResults(processResults);
            
            infoCnt = infologLine();
            try
            {
                ttsBegin;
                if (_messageTypeTableOutbound.connectionType().ConnectionTypeResource == DEVIntegConnectionTypeResource::AzureServiceBus)
                {
                    loadAzureServiceBusCacheKeyLocal = strFmt('%1,%2', _messageTypeTableOutbound.ConnectionTypeId, _messageTypeTableOutbound.ServiceBusQueueName);

                    if (! loadAzureServiceBusCache || loadAzureServiceBusCacheKeyLocal != loadAzureServiceBusCacheKey)
                    {
                        loadAzureServiceBusCache = DEVIntegMessagesLoadAzureServiceBus::constructFromOutboundMessage(_messageTypeTableOutbound);
                        loadAzureServiceBusCacheKey = loadAzureServiceBusCacheKeyLocal;
                    }
                    exportMessageBase.exportServiceBusMessage(_exportDocumentLog, loadAzureServiceBusCache);
                } 
                else
                {
                    if (_messageTypeTableOutbound.connectionType().isFileBasedType())
                    {
                        loadAzureServiceBusCacheKeyLocal = strFmt('%1,%2', _messageTypeTableOutbound.ConnectionTypeId, _messageTypeTableOutbound.OutputFolder);

                        if (! loadMessagesFileTypeCache || loadAzureServiceBusCacheKeyLocal != loadMessagesFileTypeCacheKey)
                        {
                            loadMessagesFileTypeCache = DEVIntegMessagesLoadBaseType::constructFromMessageTypeOutbound(_messageTypeTableOutbound);
                            loadMessagesFileTypeCacheKey = loadAzureServiceBusCacheKeyLocal;
                        }
                        exportMessageBase.exportFileMessage(_exportDocumentLog, loadMessagesFileTypeCache);
                    }
                    else
                    if (_messageTypeTableOutbound.connectionType().ConnectionTypeResource == DEVIntegConnectionTypeResource::Web)
                    {
                        loadAzureServiceBusCacheKeyLocal = strFmt('%1,%2', _messageTypeTableOutbound.ConnectionTypeId, _messageTypeTableOutbound.ClassName);

                        if (! loadMessagesFileTypeCache || loadAzureServiceBusCacheKeyLocal != loadMessagesFileTypeCacheKey)
                        {
                            loadMessagesFileTypeCache = DEVIntegMessagesLoadBaseType::constructFromMessageTypeOutbound(_messageTypeTableOutbound);
                            loadMessagesFileTypeCacheKey = loadAzureServiceBusCacheKeyLocal;
                        }
                        loadMessagesFileTypeCache.parmProcessResults(processResults);
                        exportMessageBase.exportWebMessage(_exportDocumentLog, loadMessagesFileTypeCache);
                    }
                }
    
                refRecIf = _exportDocumentLog.recVersion;
                exportDocumentLogUpd = DEVIntegExportDocumentLog::findRecId(_exportDocumentLog.RecId, true);
                if (exportDocumentLogUpd.RecId && exportDocumentLogUpd.StatusChangeDate == _exportDocumentLog.StatusChangeDate)
                {
                    stopwatch.Stop();

                    exportDocumentLogUpd.ExportStatus           = DEVIntegExportStatus::Sent;
                    exportDocumentLogUpd.StatusChangeDate       = DateTimeUtil::utcNow();
                    exportDocumentLogUpd.DurationInMilliseconds = any2Int(stopwatch.get_ElapsedMilliseconds());
                    exportDocumentLogUpd.update();

                    if (_messageTypeTableOutbound.OutboundLogType == DEVIntegOutboundLogType::Full)
                    {
                        DEVIntegMessageDataOutbound::insertLog(exportDocumentLogUpd, exception, processResults);
                    }
                }
    
                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                isErrorCaught   = true;
                exception       = Exception::Deadlock;
            }
            catch (Exception::Error)
            {
                isErrorCaught   = true;
                exception       = Exception::Error;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    isErrorCaught   = true;
                    exception       = Exception::UpdateConflict;
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::UpdateConflictNotRecovered)
            {
                isErrorCaught   = true;
                exception       = Exception::UpdateConflictNotRecovered;
            }
            catch(Exception::CLRError)
            {
                error(AifUtil::getClrErrorMessage());
                isErrorCaught   = true;
                exception       = Exception::CLRError;
            }
            catch
            {
                isErrorCaught   = true;
                exception       = Exception::Error;
            }

            if (isErrorCaught)
            {
                if (processResults && processResults.parmProcessPrefix())
                {
                    error(processResults.parmProcessPrefix());
                }

                ttsbegin;
                DEVIntegMessageDataOutbound::insertLog(_exportDocumentLog, exception, processResults, infoCnt);

                exportDocumentLogUpd = DEVIntegExportDocumentLog::findRecId(_exportDocumentLog.RecId, true);
                if (exportDocumentLogUpd.RecId)
                {
                    exportDocumentLogUpd.ProcessingAttempts++;
                    exportDocumentLogUpd.update();
                }

                ttscommit;

                if (exportMessageBase && ! exportMessageBase.failOnFirstError())
                {
                    warning(strFmt("Failed to export %1, document: %2", _messageTypeTableOutbound.MessageTypeIdOutbound, _exportDocumentLog.DocumentId));
                }
                else
                {
                    throw error(strFmt("Failed to export %1, document: %2", _messageTypeTableOutbound.MessageTypeIdOutbound, _exportDocumentLog.DocumentId));
                }
            } 
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>processOutboundFolder</Name>
				<Source><![CDATA[
    public void processOutboundFolder(DEVIntegMessageTypeTableOutbound  _messageTypeTableOutbound)
    {
        DEVIntegMessageTypeTableOutbound  messageTypeTableOutbound;
        Query                        localQuery = new Query();
        QueryBuildDataSource         qbds;
        QueryRun                     localQueryRun;
        
       
        DEVIntegExportDocumentLog    exportDocumentLog;
        QueryBuildRange              qBR;

        int                          processedCounter;

        ;
        loadAzureServiceBusCache = null;
        localQuery = new Query();
        qbds = localQuery.addDataSource(tablenum(DEVIntegExportDocumentLog));
        DEV::copyRanges(qbds, queryRun.query().dataSourceTable(tablenum(DEVIntegExportDocumentLog)));
        qbds.sortClear();
        qbds.addSortField(fieldNum(DEVIntegExportDocumentLog, CreatedDateTime));
        qbds.addSortField(fieldNum(DEVIntegExportDocumentLog, RecId));

        qbds = qbds.addDataSource(tablenum(DEVIntegMessageTypeTableOutbound));
        qbds.relations(true);
        DEV::copyRanges(qbds, queryRun.query().dataSourceTable(tablenum(DEVIntegMessageTypeTableOutbound)));
        
        qBR = SysQuery::findOrCreateRange(qbds, fieldnum(DEVIntegMessageTypeTableOutbound, ConnectionTypeId));
        qBR.value(SysQuery::value(_messageTypeTableOutbound.ConnectionTypeId));
        qBR = SysQuery::findOrCreateRange(qbds, fieldnum(DEVIntegMessageTypeTableOutbound, ServiceBusQueueName));
        qBR.value(SysQuery::value(_messageTypeTableOutbound.ServiceBusQueueName));
        qBR = SysQuery::findOrCreateRange(qbds, fieldnum(DEVIntegMessageTypeTableOutbound, OutputFolder));
        qBR.value(SysQuery::value(_messageTypeTableOutbound.OutputFolder));

        localQueryRun = new QueryRun(localQuery);
        while (localQueryRun.next())
        {
            messageTypeTableOutbound = localQueryRun.get(tablenum(DEVIntegMessageTypeTableOutbound));
            exportDocumentLog = localQueryRun.get(tablenum(DEVIntegExportDocumentLog));

            this.processExportDocumentLog(exportDocumentLog, messageTypeTableOutbound);
            processedCounter++;

        }
        info(strfmt("%1 %2%3: %4 record(s) processed", 
            _messageTypeTableOutbound.ConnectionTypeId, _messageTypeTableOutbound.ServiceBusQueueName, _messageTypeTableOutbound.OutputFolder,
            processedCounter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {


        Query                   groupByQuery = new Query();
        QueryRun                groupByQueryRun;
        QueryBuildDataSource    qbds;
        DEVIntegMessageTypeTableOutbound  messageTypeTableOutbound;
        ;
        qbds = groupByQuery.addDataSource(tablenum(DEVIntegMessageTypeTableOutbound));
        DEV::copyRanges(qbds, queryRun.query().dataSourceTable(tablenum(DEVIntegMessageTypeTableOutbound)));
        qbds.addGroupByField(fieldNum(DEVIntegMessageTypeTableOutbound, ConnectionTypeId));
        qbds.addGroupByField(fieldNum(DEVIntegMessageTypeTableOutbound, ServiceBusQueueName));
        qbds.addGroupByField(fieldNum(DEVIntegMessageTypeTableOutbound, OutputFolder));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tablenum(DEVIntegExportDocumentLog));
        qbds.relations(true);
        qbds.orderMode(OrderMode::GroupBy);
        DEV::copyRanges(qbds, queryRun.query().dataSourceTable(tablenum(DEVIntegExportDocumentLog)));
        
        groupByQueryRun = new QueryRun(groupByQuery);

        setPrefix(RunBase::getDescription(classIdGet(this)));
    

        while (groupByQueryRun.next())
        {
            messageTypeTableOutbound = groupByQueryRun.get(tablenum(DEVIntegMessageTypeTableOutbound));
            this.processOutboundFolder(messageTypeTableOutbound);

            /*

            exportDocumentLog = queryRun.get(tablenum(DEVIntegExportDocumentLog));
            changeCompany(exportDocumentLog.CompanyId)
            {
                this.processExportDocumentLog(exportDocumentLog);
            }
            processedCounter++;
            */
    
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        ;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version    version = RunBase::getVersion(_packedClass);
        container  queryCon;
        ;
    
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,queryCon] = _packedClass;
                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DEVIntegExportDocumentsLog construct()
    {
        return new DEVIntegExportDocumentsLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        ;
    
        return "Export documents from log";
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportSelectedRecords</Name>
				<Source><![CDATA[
    static void exportSelectedRecords(DEVIntegExportDocumentLog    _exportDocumentLog)
    {
        FormDataSource                exportDocumentLogDS;
        DEVIntegExportDocumentLog     exportDocumentLog;
        DEVIntegExportDocumentsLog    integExportDocumentLog = DEVIntegExportDocumentsLog::construct();
        int                           processedCounter;
        ;
        exportDocumentLogDS = FormDataUtil::getFormDataSource(_exportDocumentLog);
    
        for(exportDocumentLog = exportDocumentLogDS.getFirst(true) ? exportDocumentLogDS.getFirst(true) : exportDocumentLogDS.cursor();
            exportDocumentLog.RecId;
            exportDocumentLog = exportDocumentLogDS.getNext())
        {
            integExportDocumentLog.processExportDocumentLog(exportDocumentLog, exportDocumentLog.messageTypeTableOutbound());
            processedCounter++;
        }
        DEV::dsResearch(_exportDocumentLog);
    
        info(strfmt("%1 record(s) processed", processedCounter));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportRecordList</Name>
				<Source><![CDATA[
    static void exportRecordList(DEVIntegExportRecordList   _integExportRecordList)
    {
        DEVIntegExportDocumentLog     exportDocumentLog;
        DEVIntegExportDocumentsLog    integExportDocumentLog = DEVIntegExportDocumentsLog::construct();
        int                           processedCounter;
        container                     selectedRecords;
        int                           i;
        RefRecId                      refRecId;
        ;
        if (_integExportRecordList)
        {
            try
            {
                selectedRecords = _integExportRecordList.getExportLogRecIdCon();
                for (i = 1; i <= conlen(selectedRecords); i++)
                {
                    refRecId = conpeek(selectedRecords, i);
                    exportDocumentLog = DEVIntegExportDocumentLog::findRecId(refRecId);
                    if (exportDocumentLog.RecId &&
                        exportDocumentLog.ExportStatus == DEVIntegExportStatus::ToSend)
                    {
                        integExportDocumentLog.processExportDocumentLog(exportDocumentLog, exportDocumentLog.messageTypeTableOutbound());
                        processedCounter++;
                    }
                }
            }
            catch(Exception::Error)
            {
                error(strFmt("Export document %1 failed(ref %2)", exportDocumentLog.DocumentId, refRecId));
            }
            catch(Exception::CLRError)
            {
                error(AifUtil::getClrErrorMessage());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DEVIntegExportDocumentsLog    runObject = DEVIntegExportDocumentsLog::construct();
        QueryBuildDataSource  qbds;
        ;
    
        if (_args && _args.dataset() && _args.record().TableId == tablenum(DEVIntegExportDocumentLog))
        {
            qbds = runObject.queryRun().query().dataSourceTable(tablenum(DEVIntegExportDocumentLog));
            qbds.clearRanges();
            qbds.addRange(fieldnum(DEVIntegExportDocumentLog, RecId)).value(queryValue(runObject.parmExportDocumentLogCaller().RecId));
            //runObject.parmIsDisableUnpackQuery(true);
        }
        if (runObject.prompt())
        {
            runObject.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>