<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegExportMessageBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DEVIntegExportMessageBase
{
    DEVIntegMessageTypeTableOutbound messageTypeTableOutbound;

    DEVIntegExportRecordList         integExportRecordList;

    DEVIntegMessageProcessResult     processResults;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProcessResults</Name>
				<Source><![CDATA[
    public DEVIntegMessageProcessResult parmProcessResults(DEVIntegMessageProcessResult _processResults = processResults)
    {
        processResults = _processResults;
        return processResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportClassName</Name>
				<Source><![CDATA[
    public Name exportClassName()
    {
        return classId2Name(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public str getDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>failOnFirstError</Name>
				<Source><![CDATA[
    public boolean failOnFirstError()
    {
        boolean res;
        res = messageTypeTableOutbound.connectionType().ConnectionTypeResource != DEVIntegConnectionTypeResource::Web;
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessageTypeTableOutbound</Name>
				<Source><![CDATA[
    public DEVIntegMessageTypeTableOutbound parmMessageTypeTableOutbound(DEVIntegMessageTypeTableOutbound _messageTypeTableOutbound = messageTypeTableOutbound)
    {
        messageTypeTableOutbound = _messageTypeTableOutbound;
        return messageTypeTableOutbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.parmMessageTypeTableOutbound(DEVIntegMessageTypeTableOutbound::findEnabled(this.exportClassName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMessageTypeEnabled</Name>
				<Source><![CDATA[
    public boolean  isMessageTypeEnabled()
    {
        return messageTypeTableOutbound.RecId && messageTypeTableOutbound.IsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportAllData</Name>
				<Source><![CDATA[
    public void exportAllData()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogFillFields</Name>
				<Source><![CDATA[
    public void createLogFillFields(Common  _exportTable, DEVIntegExportDocumentLog   _exportDocumentLog)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogFromCommon</Name>
				<Source><![CDATA[
    public void createLogFromCommon(Common  _exportTable, Description _documentId)
    {
        DEVIntegExportDocumentLog      exportDocumentLog;
        ;
        ttsBegin;
    
        exportDocumentLog = DEVIntegExportDocumentLog::findFromCommon(_exportTable, messageTypeTableOutbound.ClassName, true);

        this.createLogFillFields(_exportTable, exportDocumentLog);
        
        exportDocumentLog.MessageTypeIdOutbound = messageTypeTableOutbound.MessageTypeIdOutbound;

        if (!exportDocumentLog)
        {
            exportDocumentLog.initFromCommon(_exportTable, messageTypeTableOutbound.ClassName, _documentId);
            exportDocumentLog.setToSend();
            exportDocumentLog.insert();
        }
        else
        {
            exportDocumentLog.setToSend();
            exportDocumentLog.update();
        }
        if (integExportRecordList)
        {
            integExportRecordList.addExportLog(exportDocumentLog.RecId);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntegExportRecordList</Name>
				<Source><![CDATA[
    public DEVIntegExportRecordList parmIntegExportRecordList(DEVIntegExportRecordList _integExportRecordList = integExportRecordList)
    {
        ;
        integExportRecordList = _integExportRecordList;

        return integExportRecordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMessageServiceBusCache</Name>
				<Source><![CDATA[
    public void sendMessageServiceBusCache(DEVIntegExportDocumentLog              _exportDocumentLog,
                                          DEVIntegMessagesLoadAzureServiceBus     _loadAzureServiceBusCache,
                                           str  _messageData, str _messageLabel = '')
    {
        _loadAzureServiceBusCache.sendMessage(_messageData, _messageLabel);
        if (messageTypeTableOutbound.OutboundLogType == DEVIntegOutboundLogType::Full && _exportDocumentLog.RecId)
        {
            DEVIntegMessageDataOutbound  messageDataOutbound;

            messageDataOutbound.ExportLogRefRecId = _exportDocumentLog.RecId;
            messageDataOutbound.FileDataStr       = _messageData;
            messageDataOutbound.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportServiceBusMessage</Name>
				<Source><![CDATA[
    public void exportServiceBusMessage(DEVIntegExportDocumentLog    _exportDocumentLog, DEVIntegMessagesLoadAzureServiceBus     loadAzureServiceBusCache)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportFileMessage</Name>
				<Source><![CDATA[
    public void exportFileMessage(DEVIntegExportDocumentLog    _exportDocumentLog, DEVIntegMessagesLoadBaseType     _loadFileStorageCache)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportWebMessage</Name>
				<Source><![CDATA[
    public void exportWebMessage(DEVIntegExportDocumentLog    _exportDocumentLog, DEVIntegMessagesLoadBaseType     _loadFileStorageCache)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomLoadType</Name>
				<Source><![CDATA[
    //should be extended from DEVIntegMessagesLoadBaseType
    public DEVIntegMessagesLoadBaseType getCustomLoadType(DEVIntegMessageTypeTableOutbound        _messageTypeTableOutbound)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setManualTestButton</Name>
				<Source><![CDATA[
    public void setManualTestButton(FormFunctionButtonControl  _manualTestButtonControl)
    {
        _manualTestButtonControl.visible(false);
        //_manualTestButtonControl.menuItemName(menuItemDisplayStr(DEVIntegTutorialLedgerJourHeaderStaging));
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDocumentButtonClicked</Name>
				<Source><![CDATA[
    public void viewDocumentButtonClicked(DEVIntegExportDocumentLog _exportDocumentLog)
    {
        //FormUtility::openMenuItemForm(menuItemDisplayStr(..))
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendWebMessage</Name>
				<Source><![CDATA[
    public void sendWebMessage(DEVIntegExportDocumentLog    _exportDocumentLog,
                               DEVIntegMessagesLoadBaseType _loadFileStorageCache,
                               str                          _request,
                               str                          _messageData)
    {
        _loadFileStorageCache.sendMessage(_request, _messageData);
        
        if (messageTypeTableOutbound.OutboundLogType == DEVIntegOutboundLogType::Full && _exportDocumentLog.RecId)
        {
            DEVIntegMessageDataOutbound  messageDataOutbound;

            messageDataOutbound.ExportLogRefRecId = _exportDocumentLog.RecId;
            messageDataOutbound.FileDataStr       = _messageData;
            messageDataOutbound.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMessageFileStorageCache</Name>
				<Source><![CDATA[
    public void sendMessageFileStorageCache(DEVIntegExportDocumentLog        _exportDocumentLog,
                                            DEVIntegMessagesLoadBaseType     _loadFileStorageCache,
                                            FileName  _fileName, System.IO.MemoryStream  _fileDataStream)
    {
        _loadFileStorageCache.sendFile(_fileName,  _fileDataStream);
        if (messageTypeTableOutbound.OutboundLogType == DEVIntegOutboundLogType::Full && _exportDocumentLog.RecId)
        {
            DEVIntegMessageDataOutbound  messageDataOutbound;

            messageDataOutbound.ExportLogRefRecId = _exportDocumentLog.RecId;
            messageDataOutbound.FileDataStr       = _fileName;
            messageDataOutbound.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>