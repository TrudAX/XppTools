<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegAzureStorageConnectionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Azure.Storage.Files.Shares;
using Azure.Storage.Files.Shares.Models;

class DEVIntegAzureStorageConnectionHelper
{
    Common                      messageTypeTableRef;
    ShareClient                 share;
    ShareDirectoryClient        rootDir;
    DEVIntegTmpFiles            fileList;

    str                         folderLocation;
    str                         archiveLocation;
    DEVIntegConnectionTypeId    connectionTypeId;
    str                         messageTypeId;
    str                         azureShareReference;

    System.Threading.CancellationToken  tokenNull;
    System.Object                       objNull;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>testConnection</Name>
				<Source><![CDATA[
    void testConnection()
    {
        boolean testisOK = true;
        try
        {
            this.connect();

            this.getExistingDirectory(folderLocation);
            if (archiveLocation)
            {
                this.getExistingDirectory(archiveLocation);
            }
            this.fillFiles();

            this.printFileList();
        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }
        catch
        {
            testisOK = false;
        }
        if (testisOK)
        {
            info("Test is OK");
        }
        else
        {
            throw error("Test Failed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectionString</Name>
				<Source><![CDATA[
    str   getConnectionString()
    {
        str connectionString;
        DEVIntegConnectionType connectionType = DEVIntegConnectionType::find(connectionTypeId);
        connectionString = connectionType.getConnectionString();

        if (! connectionString)
        {
            throw error(strFmt("Connection string is not specified for message type %1", messageTypeId));
        }

        return connectionString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connect</Name>
				<Source><![CDATA[
    void connect()
    {
        if (! azureShareReference)
        {
            throw error(strFmt("Share reference is not specified for message type %1", messageTypeId));
        }
        try
        {
            str                 connectionString  = this.getConnectionString();

            share = new ShareClient(connectionString, azureShareReference);
            boolean isExists;
            isExists = share.Exists(tokenNull);
            if (! isExists)
            {
                throw error(strFmt("Share '%1' doesn't exist (Type %2)", azureShareReference, messageTypeId));
            }

            // Get a reference to the root directory
            rootDir = share.GetRootDirectoryClient();
            isExists = rootDir.Exists(tokenNull);
            if (! isExists)
            {
                throw error(strFmt("Root directory '%1' doesn't exist (Type %2)", azureShareReference, messageTypeId));
            }
        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileInDirectory</Name>
				<Source><![CDATA[
    public void  createFileInDirectory(FileName  _fileName, FolderName  _archDir, System.IO.MemoryStream  _fileDataStream)
    {
        try
        {
            ShareDirectoryClient fileDirTo = rootDir.GetSubdirectoryClient(_archDir);      

            if (!fileDirTo.Exists(tokenNull))
            {
                throw error(strFmt("Directory '%1' doesn't exist (Type %2)", _archDir, messageTypeId));
            }
            ShareFileClient fileTo = fileDirTo.GetFileClient(_fileName);

            _fileDataStream.Position = 0;
            System.Int64 fileLength = _fileDataStream.Length;

            fileTo.Create(fileLength, objNull, objNull, objNull, objNull,  tokenNull);

            Azure.HttpRange range = new Azure.HttpRange(0, fileLength);

            fileTo.UploadRange(range, _fileDataStream, objNull, tokenNull);
        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFileToDirectory</Name>
				<Source><![CDATA[
    public void  moveFileToDirectory(DEVIntegTmpFiles  _fileRef, FolderName  _archDir, System.IO.MemoryStream  _fileDataStream, boolean _appendTimeStamp = true)
    {
        try
        {
            ShareDirectoryClient fileDir = rootDir.GetSubdirectoryClient(_fileRef.FolderName);

            ShareFileClient sourceFile = fileDir.GetFileClient(_fileRef.FileName);

            FileName newFileName = _fileRef.FileName;
            if (_appendTimeStamp)
            {
                container entityFileData = Docu::splitFilename(newFileName);

                FileName            entityName = conPeek(entityFileData, 1);
                DMFDefaultExtension extension = conPeek(entityFileData, 2);

                System.DateTime dt = System.DateTime::Now;
                str timeStamp = dt.ToString("yyyy'-'MM'-'dd'T'HHmmss");

                entityName = entityName + '_' + timeStamp;
                entityName = subStr(entityName, 1, 254);

                newFileName = entityName + (extension ? strFmt(".%1", extension) : "");
            }

            str newPath = strFmt("%1/%2", _archDir, newFileName);

            sourceFile.Rename(newPath, objNull, tokenNull);

        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    System.IO.MemoryStream  readFile(DEVIntegTmpFiles  _fileRef)
    {
        System.IO.MemoryStream memoryStream;

        ShareDirectoryClient fileDir = rootDir.GetSubdirectoryClient(_fileRef.FolderName);

        ShareFileClient file = fileDir.GetFileClient(_fileRef.FileName);

        // Ensure that the file exists.
        if (file.Exists(tokenNull))
        {
            memoryStream = new System.IO.MemoryStream();
            ShareFileDownloadInfo download = file.Download(objNull, tokenNull);
            System.IO.Stream  downloadContent = download.Content; 

            downloadContent.CopyTo(memoryStream);
            memoryStream.Position = 0;
        }
        else
        {
            warning(strFmt("File '%1' doesn't exist", _fileRef.FileName));
        }

        return memoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExistingDirectory</Name>
				<Source><![CDATA[
    ShareDirectoryClient  getExistingDirectory(FolderName  _folderName)
    {
        ShareDirectoryClient fileDir = rootDir.GetSubdirectoryClient(_folderName);
        if (! fileDir)
        {
            throw error(strFmt("Directory '%1' doesn't exists (Type %2). Can't create a client'", _folderName, messageTypeId));
        }
        System.Boolean isExists = fileDir.Exists(tokenNull).get_Value();
        if (! isExists)
        {
            throw error(strFmt("Directory '%1' doesn't exists (Type %2)", _folderName, messageTypeId));
        }
        return fileDir;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFiles</Name>
				<Source><![CDATA[
    DEVIntegTmpFiles fillFiles(FolderName  _folderName = folderLocation)
    {
        fileList = null;

        ShareDirectoryClient fileDir = this.getExistingDirectory(_folderName);

        var azureItems  = fileDir.GetFilesAndDirectories(objNull, tokenNull);
        var enum1  = azureItems.GetEnumerator();
        
        while (enum1.MoveNext())
        {
            ShareFileItem item = enum1.Current as ShareFileItem;

            // If it's a file (not a directory)
            if (item != null && !item.IsDirectory)
            {
                ShareFileClient fileClient = fileDir.GetFileClient(item.Name);
                        
                if (fileClient.Exists(tokenNull))
                {
                    fileList.FileName    = fileClient.Name;
                    fileList.FolderName  = _folderName;
                    fileList.FileSize    = item.FileSize;// file.Properties.Length;
                    fileList.insert();
                }
            }
        }
        return fileList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFileList</Name>
				<Source><![CDATA[
    void printFileList()
    {
        boolean     isAny;

        fileList.clear();
        while select fileList
        {
            info(strFmt("Name %1, Size %2", fileList.FileName, fileList.FileSize));
            isAny = true;
        }
        if (! isAny)
        {
            info("No files found");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessageTypeTableRef</Name>
				<Source><![CDATA[
    public Common parmMessageTypeTableRef(Common _messageTypeTableRef = messageTypeTableRef)
    {
        messageTypeTableRef = _messageTypeTableRef;
        return messageTypeTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMessageTypeTable</Name>
				<Source><![CDATA[
    public void initFromMessageTypeTable(Common     _messageTable)
    {

        DEVIntegMessageTypeInbound          messageTypeInbound;
        DEVIntegMessageTypeTableOutbound    messageTypeTableOutbound;

        this.parmMessageTypeTableRef(_messageTable);

        switch (_messageTable.TableId)
        {
            case tableNum(DEVIntegMessageTypeInbound):
                messageTypeInbound = _messageTable;
                folderLocation       = messageTypeInbound.ReadLocation;
                archiveLocation      = messageTypeInbound.ArchiveLocation;
                connectionTypeId     = messageTypeInbound.ConnectionTypeId;
                messageTypeId        = messageTypeInbound.MessageTypeId;
                azureShareReference  = messageTypeInbound.AzureShareReference;
                break;
            case tableNum(DEVIntegMessageTypeTableOutbound):
                messageTypeTableOutbound = _messageTable;
                folderLocation       = messageTypeTableOutbound.OutputFolder;
                archiveLocation      = '';
                connectionTypeId     = messageTypeTableOutbound.ConnectionTypeId;
                messageTypeId        = messageTypeTableOutbound.MessageTypeIdOutbound;
                azureShareReference  = messageTypeTableOutbound.AzureShareReference;
                break;

            default:
                throw error(strFmt("Table %1 is not supported", _messageTable.TableId));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMessageTypeId</Name>
				<Source><![CDATA[
    static DEVIntegAzureStorageConnectionHelper constructMessageTypeId(DEVIntegMessageTypeIdInbound  _messageTypeId)
    {
        DEVIntegMessageTypeInbound             messageTypeTable;
        DEVIntegAzureStorageConnectionHelper  res;
        ;
        messageTypeTable = DEVIntegMessageTypeInbound::find(_messageTypeId);
        if (! messageTypeTable.RecId)
        {
            throw error(strFmt("Message type '%1' does not exist", _messageTypeId));
        }

        res = DEVIntegAzureStorageConnectionHelper::construct(messageTypeTable);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static DEVIntegAzureStorageConnectionHelper construct(DEVIntegMessageTypeInbound     _messageTypeTable)
    {
        DEVIntegAzureStorageConnectionHelper        res = new DEVIntegAzureStorageConnectionHelper();
        res.initFromMessageTypeTable(_messageTypeTable);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOutbound</Name>
				<Source><![CDATA[
    static DEVIntegAzureStorageConnectionHelper constructOutbound(DEVIntegMessageTypeTableOutbound     _messageTypeTableOutbound)
    {
        DEVIntegAzureStorageConnectionHelper        res = new DEVIntegAzureStorageConnectionHelper();
        res.initFromMessageTypeTable(_messageTypeTableOutbound);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAzureEnvHostedServiceName</Name>
				<Source><![CDATA[
    public static DEVIntegAzureEnvHostedServiceName getAzureEnvHostedServiceName()
    {
        var env = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();

        return env.Infrastructure.HostedServiceName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>