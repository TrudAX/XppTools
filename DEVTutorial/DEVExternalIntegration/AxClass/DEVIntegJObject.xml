<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegJObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
class DEVIntegJObject
{
    public Newtonsoft.Json.Linq.JObject body;

    public str currentArrayName;
    public JToken currentArrayElement;
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    public static DEVIntegJObject parse(str _body)
    {
        DEVIntegJObject jo = new DEVIntegJObject();
        
        jo.body = JObject::Parse(_body);
        
        return jo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseToken</Name>
				<Source><![CDATA[
    public static DEVIntegJObject parseToken(JToken _body)
    {
        DEVIntegJObject jo = new DEVIntegJObject();
        
        jo.body = _body;
        
        return jo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DEVIntegJObject construct()
    {
        DEVIntegJObject jo = new DEVIntegJObject();
        
        jo.body = new Newtonsoft.Json.Linq.JObject();
        
        return jo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static DEVIntegJObject create(JObject _body)
    {
        DEVIntegJObject jo = new DEVIntegJObject();
        
        jo.body = _body;
        
        return _body == null ? null : jo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueString</Name>
				<Source><![CDATA[
    public str getValueString(str _propertyName)
    {
        try
        {
            JToken jToken = this.body.GetValue(_propertyName);
            
            if (jToken == null)
            {
                return "";
            }
            str res = jToken.Type == JTokenType::Null ? "" : jToken.ToString();

            return res;
        }
        catch (Exception::CLRError)
        {
            return "";
        }
        catch
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueEnum</Name>
				<Source><![CDATA[
    public int getValueEnum(str _propertyName, EnumId _enumId)
    {
        JToken jToken = this.body.GetValue(_propertyName);
        str    typeString;
        int         res;
        DictEnum    dictEnum ;
        const int   EnumValueNotFound = 255;
            
        if (jToken == null || jToken.Type == JTokenType::Null)
        {
            typeString = "";
        }
        else
        {
            typeString = jToken.ToString();
        }
        
        dictEnum    = new DictEnum(_enumId);
        res = DMFEntityBase::string2Enum(typeString, _enumId);
        if (res && !dictEnum.value2Symbol(res))
        {
            res = EnumValueNotFound;
        }
        if (res == EnumValueNotFound)
        {
            throw error(strFmt("Enum %1 does not contain value '%2'(JSON Property Name: %3)",
                dictEnum.name(), typeString, _propertyName));
        }
       
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueInt64</Name>
				<Source><![CDATA[
    public int64 getValueInt64(str _propertyName)
    {
        try
        {
            JToken jToken = this.body.GetValue(_propertyName);

            if (jToken == null || jToken.Type == JTokenType::Null)
            {
                return 0;
            }

            int64 res =  System.Convert::ToInt64(jToken);

            return res;
        }
        catch
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueInt</Name>
				<Source><![CDATA[
    public int getValueInt(str _propertyName)
    {
        try
        {
            JToken jToken = this.body.GetValue(_propertyName);

            if (jToken == null || jToken.Type == JTokenType::Null)
            {
                return 0;
            }

            int res =  System.Convert::ToInt32(jToken);

            return res;
        }
        catch
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueReal</Name>
				<Source><![CDATA[
    public real getValueReal(str _propertyName)
    {
        try
        {
            JToken jToken = this.body.GetValue(_propertyName);

            if (jToken == null || jToken.Type == JTokenType::Null)
            {
                return 0;
            }

            real res = System.Convert::ToDouble(jToken);

            return res;
        }
        catch
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueDate</Name>
				<Source><![CDATA[
    public date getValueDate(str _propertyName, str _formatString = '')
    {
        TransDate           res;
        System.DateTime     resValue;

        JToken      jToken = this.body.GetValue(_propertyName);

        if (jToken != null)
        {
            if (jToken.Type == Newtonsoft.Json.Linq.JTokenType::Date)
            {
                resValue = jToken;
                res = resValue;
            }
            else
            {
                str  sDate = jToken.ToString();
                if (sDate)
                {
                    if (_formatString)
                    {
                        boolean         parsingOK;

                        parsingOK = System.DateTime::TryParseExact(sDate, _formatString, System.Globalization.CultureInfo::get_InvariantCulture(), System.Globalization.DateTimeStyles::None, byref resValue);
                        if (! parsingOK)
                        {
                            throw error(strFmt("Failed to convert value %1 to a date for %2 JSON property using %3 format",
                                        sDate, _propertyName, _formatString));
                        }
                        res = resValue;

                    }
                    else
                    {
                        res   = System.Convert::ToDateTime(sDate);
                    }
                }
            }
        }
        return res;
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueDateTime</Name>
				<Source><![CDATA[
    public TransDateTime getValueDateTime(str _propertyName, str _formatString = '')
    {
        TransDateTime   res = utcDateTimeNull();
        System.DateTime resValue;

        JToken jToken = this.body.GetValue(_propertyName);

        if (jToken != null)
        {
            //need to check should we always use string
            if (jToken.Type == Newtonsoft.Json.Linq.JTokenType::Date)
            {
                resValue = jToken;
                res = resValue;
            }
            else
            {
                str  sDate = jToken.ToString();
                if (sDate)
                {
                    if (_formatString)
                    {
                        boolean         parsingOK;

                        parsingOK = System.DateTime::TryParseExact(sDate, _formatString, System.Globalization.CultureInfo::get_InvariantCulture(), System.Globalization.DateTimeStyles::None, byref resValue);
                        if (! parsingOK)
                        {
                            throw error(strFmt("Failed to convert value %1 to a date for %2 JSON property using %3 format",
                                        sDate, _propertyName, _formatString));
                        }
                        res = resValue;

                    }
                    else
                    {
                        res   = System.Convert::ToDateTime(sDate);
                    }
                }
            }
        }
       
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueArray</Name>
				<Source><![CDATA[
    //OBSOLETTE, use readNextArrayItem instead. How to use:
    //JArray specs = result.GetValueArray('lines');
    // (specs)
    //{
    //    JToken line = specs.First;
    //    while (line)
    //    {
    //        DEVIntegJObject lineJSON = DEVIntegJObject::ParseToken(line);
    //
    //        lineJSON.GetValueString('itemId');
    //        line = line.Next;
    //    }
    //}
    public JArray getValueArray(str _propertyName)
    {
        try
        {

            JArray  items = null;

            var arrValue = this.body.GetValue(_propertyName);

            if (arrValue)
            {
                items = arrValue;//JArray::Parse(arrValue);
            }

            return items;
        }
        catch
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueObject</Name>
				<Source><![CDATA[
    public DEVIntegJObject getValueObject(str _propertyName)
    {
        JToken      jToken = this.body.GetValue(_propertyName);
        DEVIntegJObject res;
        
        if (jToken)
        {
            res = jToken.Type == JTokenType::Null ? null : DEVIntegJObject::Parse(jToken.ToString());
        }
        if (! res)
        {
            throw error(strFmt("Can't find %1 property in the document", _propertyName));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readNextArrayItem</Name>
				<Source><![CDATA[
    //while (headerContract.readNextArrayItem('OrderLines'))
    //{
    //    DEVIntegJObject lineJSON = headerContract.getCurrentArrayItemValue();
    public boolean readNextArrayItem(str _propertyName)
    {
        boolean  res;
        if (currentArrayName != _propertyName)
        {
            currentArrayName = _propertyName;

            JArray orderLinesAr = this.getValueArray(_propertyName);
            if (orderLinesAr)
            {
                currentArrayElement = orderLinesAr.First;
                if (currentArrayElement)
                {
                    res = true;
                }
            }
        }
        else
        {
            if (currentArrayElement)
            {
                currentArrayElement = currentArrayElement.Next;
                if (currentArrayElement)
                {
                    res = true;
                }
            }
        }
        if (! res)
        {
            currentArrayName = "";
            currentArrayElement = null;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentArrayItemValue</Name>
				<Source><![CDATA[
    public DEVIntegJObject getCurrentArrayItemValue()
    {
        DEVIntegJObject res;
        if (currentArrayElement)
        {
            res = DEVIntegJObject::parseToken(currentArrayElement);
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTokenPathStr</Name>
				<Source><![CDATA[
    public System.String selectTokenPathStr(str _path)
    {
        System.String   textJson;
        JToken  jToken = body.SelectToken(_path);
        
        if (jToken == null || jToken.Type == JTokenType::Null)
        {
            throw error(strFmt("JSON path '%1' not found in the document", _path));
        }

        textJson = jToken.ToString();

        return textJson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTokenPathJSON</Name>
				<Source><![CDATA[
    public DEVIntegJObject selectTokenPathJSON(str _path)
    {
        DEVIntegJObject res;
        System.String   textJson;

        textJson = this.selectTokenPathStr(_path);
        textJson = textJson.Trim();

        if (textJson.StartsWith("```json"))
        {
            textJson = textJson.Substring(7);
        }

        if (textJson.EndsWith("```"))
        {
            textJson = textJson.Substring(0, textJson.Length - 3);
        }

        Newtonsoft.Json.JsonReaderException ex;
        try
        {
            res = DEVIntegJObject::parse(textJson);
        }
        catch (ex)
        {
            throw error(strFmt("JSON path '%1' contains invalid JSON string: %2", _path, textJson));
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    public void add(str _propertyName, Newtonsoft.Json.Linq.JToken _propertyValue)
    {
        body.Add(_propertyName, _propertyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBoolean</Name>
				<Source><![CDATA[
    public Newtonsoft.Json.Linq.JObject addBoolean(str _propertyName, boolean _propertyValue)
    {
        str boolStr = enum2Str(_propertyValue);
        
        body.Add(_propertyName, boolStr);
    
        return body;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>