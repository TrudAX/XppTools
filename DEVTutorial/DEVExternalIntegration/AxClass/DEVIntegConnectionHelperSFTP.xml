<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegConnectionHelperSFTP</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Renci.SshNet;
using Renci.SshNet.Sftp;

class DEVIntegConnectionHelperSFTP
{
    Common                      messageTypeTableRef;
    DEVIntegTmpFiles            fileList;

    str                         folderLocation;
    str                         archiveLocation;
    DEVIntegConnectionTypeId    connectionTypeId;
    str                         messageTypeId;
    str                         azureShareReference;


    SftpClient                  clientNet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructOutbound</Name>
				<Source><![CDATA[
    static DEVIntegConnectionHelperSFTP constructOutbound(DEVIntegMessageTypeTableOutbound     _messageTypeTableOutbound)
    {
        DEVIntegConnectionHelperSFTP        res = new DEVIntegConnectionHelperSFTP();
        res.initFromMessageTypeTable(_messageTypeTableOutbound);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static DEVIntegConnectionHelperSFTP construct(DEVIntegMessageTypeInbound     _messageTypeTable)
    {
        DEVIntegConnectionHelperSFTP        res = new DEVIntegConnectionHelperSFTP();
        res.initFromMessageTypeTable(_messageTypeTable);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMessageTypeTable</Name>
				<Source><![CDATA[
    public void initFromMessageTypeTable(Common     _messageTable)
    {

        DEVIntegMessageTypeInbound          messageTypeInbound;
        DEVIntegMessageTypeTableOutbound    messageTypeTableOutbound;

        this.parmMessageTypeTableRef(_messageTable);

        switch (_messageTable.TableId)
        {
            case tableNum(DEVIntegMessageTypeInbound):
                messageTypeInbound = _messageTable;
                folderLocation       = messageTypeInbound.ReadLocation;
                archiveLocation      = messageTypeInbound.ArchiveLocation;
                connectionTypeId     = messageTypeInbound.ConnectionTypeId;
                messageTypeId        = messageTypeInbound.MessageTypeId;
                azureShareReference  = messageTypeInbound.AzureShareReference;
                break;
            case tableNum(DEVIntegMessageTypeTableOutbound):
                messageTypeTableOutbound = _messageTable;
                folderLocation       = messageTypeTableOutbound.OutputFolder;
                archiveLocation      = '';
                connectionTypeId     = messageTypeTableOutbound.ConnectionTypeId;
                messageTypeId        = messageTypeTableOutbound.MessageTypeIdOutbound;
                azureShareReference  = messageTypeTableOutbound.AzureShareReference;
                break;

            default:
                throw error(strFmt("Table %1 is not supported", _messageTable.TableId));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessageTypeTableRef</Name>
				<Source><![CDATA[
    public Common parmMessageTypeTableRef(Common _messageTypeTableRef = messageTypeTableRef)
    {
        messageTypeTableRef = _messageTypeTableRef;
        return messageTypeTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>directoryName</Name>
				<Source><![CDATA[
    public str directoryName(str _dirName)
    {
        str res = _dirName;

        if (strEndsWith(res, @'\') || strEndsWith(res, @'/'))
        {
            res = subStr(res, 1, strLen(res) - 1);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connect</Name>
				<Source><![CDATA[
    public void connect()
    {
        if (! folderLocation)
        {
            throw error(strFmt("Folder is not specified for message type %1", messageTypeId));
        }
        try
        {
            DEVIntegConnectionType connectionType = DEVIntegConnectionType::find(connectionTypeId);

            PasswordAuthenticationMethod passwordAuthenticationMethod = new PasswordAuthenticationMethod(connectionType.FTPUserName, connectionType.getFTPPassword());
            clientNet = new SftpClient(new ConnectionInfo(connectionType.FTPHostName, connectionType.FTPPort, connectionType.FTPUserName, passwordAuthenticationMethod));
            clientNet.Connect();
        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconnect</Name>
				<Source><![CDATA[
    public void disconnect()
    {
        try
        {
            if (clientNet != null)
            {
                clientNet.Disconnect();
            }
        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileInDirectory</Name>
				<Source><![CDATA[
    public void  createFileInDirectory(FileName  _fileName, FolderName  _archDir, System.IO.MemoryStream  _fileDataStream)
    {
        str fullPath;
        try
        {
            fullPath = _archDir;
            if (_archDir && subStr(_archDir, strLen(_archDir) , 1) != '/')
            {
                fullPath += '/'; 
            }
            fullPath += strFmt('%1', _fileName);
            System.Boolean  b = true;
            clientNet.UploadFile(_fileDataStream, fullPath, b, null);
        }
        catch( Exception::CLRError )
        {
            info(fullPath);
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testConnection</Name>
				<Source><![CDATA[
    void testConnection()
    {
        boolean testisOK = true;
        try
        {
            this.connect();
             
            this.getExistingDirectory(folderLocation);
            if (archiveLocation)
            {
                this.getExistingDirectory(archiveLocation);
            }
            
            this.fillFiles(folderLocation, 5);

            this.disconnect();

            this.printFileList();
        }
        catch( Exception::CLRError )
        {
            throw error(AifUtil::getClrErrorMessage());
        }
        catch
        {
            testisOK = false;
        }
        if (testisOK)
        {
            info("Test is OK");
        }
        else
        {
            throw error("Test Failed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExistingDirectory</Name>
				<Source><![CDATA[
    public void  getExistingDirectory(FolderName  _folderName)
    {
        if (! clientNet.Exists(_folderName))
        {
            throw error(strFmt("Directory '%1' doesn't exists (Type %2)", _folderName, messageTypeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFiles</Name>
				<Source><![CDATA[
    DEVIntegTmpFiles fillFiles(FolderName  _folderName = folderLocation, int _maxFileCount = 0)
    {
        fileList = null;
       
        _folderName = this.directoryName(_folderName);

        var fileItems  = clientNet.ListDirectory(_folderName, null);
        var enum1  = fileItems.GetEnumerator();

        int curFile;
        
        while (enum1.MoveNext())
        {
            SftpFile file = enum1.Current as SftpFile;
                        
            if (file != null && file.IsRegularFile)
            {
                Filename    filenameOnly,type;
                [filenameOnly,type] = Docu::splitFilename(file.FullName);

                fileList.FileName    = strFmt('%1%2%3', filenameOnly, type ? '.' : '', type);
                fileList.FolderName  = _folderName;
                fileList.FileSize    = any2Int64(file.Length / 1000);
                fileList.insert();

                curFile++;
                if (_maxFileCount && curFile >= _maxFileCount )
                {
                    break;
                }
            }
        }
        return fileList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFileToDirectory</Name>
				<Source><![CDATA[
    public void  moveFileToDirectory(DEVIntegTmpFiles  _fileRef, FolderName  _archDir, boolean _appendTimeStamp = true)
    {
        try
        {
            str fileOrigName = _fileRef.FolderName + '/' + _fileRef.FileName;
            SftpFile file = clientNet.Get(fileOrigName);
            if (! file)
            {
                throw error(strFmt("Can't find a file %1", fileOrigName));
            }

            FileName  newFileName = _fileRef.FileName;

            if (_appendTimeStamp)
            {
                container entityFileData = Docu::splitFilename(newFileName);

                FileName            entityName = conPeek(entityFileData, 1);
                DMFDefaultExtension extension = conPeek(entityFileData, 2);

                System.DateTime dt = System.DateTime::Now;
    
                str timeStamp = dt.ToString("yyyy'-'MM'-'dd'T'HHmmss");

                entityName = entityName + '_' + timeStamp;
                entityName = subStr(entityName, 1, 254);

                newFileName = entityName + (extension ? strFmt('.%1', extension) : '');
            }
            str destFileName = this.directoryName(_archDir) + '/' + newFileName;

            if (clientNet.Exists(destFileName))
            {
                clientNet.DeleteFile(destFileName);
            }
            file.MoveTo(destFileName);
        }
        catch( Exception::CLRError )
        {
            info(_fileRef.FileName);
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    System.IO.MemoryStream  readFile(DEVIntegTmpFiles  _fileRef)
    {
        System.IO.MemoryStream memoryStream;

        SftpFileStream fileStream = clientNet.OpenRead(this.directoryName(_fileRef.FolderName) + '/' + _fileRef.FileName);

        // Ensure that the file exists.
        if (fileStream != null)
        {
            memoryStream = new System.IO.MemoryStream();
            fileStream.CopyTo(memoryStream);
            memoryStream.Position = 0;
        }
        else
        {
            warning(strFmt("File '%1' doesn't exist", _fileRef.FileName));
        }

        return memoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFileList</Name>
				<Source><![CDATA[
    void printFileList()
    {
        boolean     isAny;

        fileList.clear();
        while select fileList
        {
            info(strFmt("Name %1, Size %2", fileList.FileName, fileList.FileSize));
            isAny = true;
        }
        if (! isAny)
        {
            info("No files found");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>