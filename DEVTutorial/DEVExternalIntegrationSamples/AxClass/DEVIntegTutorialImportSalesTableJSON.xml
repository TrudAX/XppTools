<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegTutorialImportSalesTableJSON</Name>
	<SourceCode>
		<Declaration><![CDATA[
/*
{
    "CompanyId": "USMF",
    "customerId": "US-002",
    "externalOrderNumber": "ABCDEFG",
    "lines": [
        {
            "lineQuantity": 1,
            "linePrice": 11,
            "lineItemBarcode": "M0001"
        },
        {
            "lineQuantity": 2,
            "linePrice": 22,
            "lineItemBarcode": "M0004"
        },
        {
            "lineQuantity": 3,
            "linePrice": 33,
            "lineItemBarcode": "M0007"
        }
    ]
}
*/

class DEVIntegTutorialImportSalesTableJSON extends DEVIntegProcessMessageBase
{

    DEVIntegTutorialSalesTableStaging      salesTableStaging;
    DEVIntegTutorialSalesLineStaging       salesLineStaging;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processMessage</Name>
				<Source><![CDATA[
    void  processMessage(DEVIntegMessageTable  _messageTable, DEVIntegMessageProcessResult _messageProcessResult)
    {
        salesTableStaging = null;
        salesLineStaging  = null;

        messageTable         =  _messageTable;
        messageProcessResult =  _messageProcessResult;
   
        if (! messageTable.IsParsed) //reading to staging tables
        {
            ttsbegin;
            delete_from salesTableStaging
                where salesTableStaging.MessageId == _messageTable.RecId;
            delete_from salesLineStaging
                where salesLineStaging.MessageId == _messageTable.RecId;
            ttscommit;

            this.readFileToStaging();
        }
        this.createDataFromStaging();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataFromStaging</Name>
				<Source><![CDATA[
    void createDataFromStaging()
    {
        SalesTable      salesTable;

        salesTableStaging =  DEVIntegTutorialSalesTableStaging::findByMessageRecId(messageTable.RecId);
        if (! salesTableStaging.RecId)
        {
            throw error(strFmt("Message %1. Can't find staging data", messageTable.Name));
        }
        if (! CompanyInfo::findDataArea(salesTableStaging.CompanyId))
        {
            throw error(strFmt("Message %1. Company %2 doesn't exist", messageTable.Name, salesTableStaging.CompanyId));
        }
        changecompany(salesTableStaging.CompanyId)
        {
            messageProcessResult.parmProcessPrefix("Data validation");
            this.validateDataFromStaging();

            ttsbegin;
            messageProcessResult.parmProcessPrefix("Sales order creation");
            salesTable = this.createSalesTable();

            salesTableStaging.selectForUpdate(true);
            salesTableStaging.SalesId = salesTable.SalesId;
            salesTableStaging.update();

            this.updateDocumentDescription(salesTable.SalesId);
            info(strFmt("Sales order %1 created", salesTable.SalesId));
            
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostalAddress</Name>
				<Source><![CDATA[
    //sample address creation
    public RecId createPostalAddress(DirPartyPostalAddressView   addressView, RefRecId _partyId,
                                    Name _firstName, Name _lastName, Name _company)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        LogisticsPostalAddressEntity postalAddressEntity;
        
        LogisticsAddressCountryRegion       logisticsAddressCountryRegion;
        LogisticsAddressState               logisticsAddressState;

        if (! addressView.CountryRegionId)
        {
            return 0;
        }
        if (_firstName || _lastName || _company)
        {
            addressView.LocationName = _firstName;
            if (_lastName)
            {
                addressView.LocationName += (addressView.LocationName ? ' ' : '') + _lastName;
            }
            if (_company)
            {
                addressView.LocationName += (addressView.LocationName ? ' ' : '') + _company;
            }
        }
        
        addressView.Party = _partyId;

        logisticsAddressCountryRegion = LogisticsAddressCountryRegion::findByISOCode(addressView.CountryRegionId);
        if (logisticsAddressCountryRegion.RecId)
        {
            addressView.CountryRegionId = logisticsAddressCountryRegion.CountryRegionId;
        }
        else
        {
            if (!LogisticsAddressCountryRegion::exist(addressView.CountryRegionId))
            {
                throw error(strFmt("@SYS9347",addressView.CountryRegionId));
            }
        }
        //state not exists
        if (addressView.State && !LogisticsAddressState::exist(addressView.CountryRegionId, addressView.State))
        {
            logisticsAddressState.StateId         = addressView.State;
            logisticsAddressState.CountryRegionId = addressView.CountryRegionId;
            logisticsAddressState.modifiedField(fieldNum(LogisticsAddressState, CountryRegionId));
            logisticsAddressState.Name            = addressView.State;
            DEV::validateWriteRecordCheck(logisticsAddressState);
            logisticsAddressState.insert();
        }
        if (!LogisticsAddressZipCode::exist(addressView.ZipCode)) //zip code is not exists
        {
            addressView.ZipCode = conPeek(str2con_RU(addressView.ZipCode, '-'), 1);
        }

        DirParty                    dirParty;
        container                   roles;
        DirPartyPostalAddressView   partyAddressView;

        dirParty = DirParty::constructFromPartyRecId(_partyId);
        roles = [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId];
        partyAddressView = dirParty.createOrUpdatePostalAddress(addressView,roles);

        logisticsPostalAddress = LogisticsPostalAddress::findByLocation(partyAddressView.Location);

        //postalAddressEntity = LogisticsPostalAddressEntity::construct();
        //logisticsPostalAddress = postalAddressEntity.createPostalAddress(addressView);

        return logisticsPostalAddress.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    SalesTable createSalesTable()
    {
        SalesTable                      salesTable;
        SalesLine                       salesLine;

        int                     numLines;
        
        ttsbegin;

        while select salesLineStaging
            order by RecId
            where salesLineStaging.MessageId ==  salesTableStaging.MessageId
        {
            numLines++;
            if (!salesTable.RecId)
            {
                salesTable.initValue(SalesType::Sales);
                salesTable.SalesId              = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
                salesTable.CustAccount          = salesTableStaging.CustAccount;
                salesTable.initFromCustTable();

                DEV::validateWriteRecordCheck(salesTable);
                salesTable.insert();

            }
            InventItemBarcode  inventItemBarcode = InventItemBarcode::findInputBarcode(salesLineStaging.ItemBarCode);
            if (inventItemBarcode.RecId) //just for testing
            {
                salesLineStaging.ItemId = inventItemBarcode.ItemId;
            }
            else
            {
                salesLineStaging.ItemId = salesLineStaging.ItemBarCode;
            }
            salesLineStaging.selectForUpdate(true);
            salesLineStaging.update();

            salesLine.clear();
            salesLine.initValue();
            salesLine.ItemId = salesLineStaging.ItemId;
            salesLine.initFromSalesTable(salesTable);
            salesLine.initFromInventTable(InventTable::find(salesLine.ItemId));
            salesLine.SalesQty              = salesLineStaging.SalesQty;
            salesLine.QtyOrdered            = SalesLine.calcQtyOrdered();
            salesLine.SalesDeliverNow       = salesLine.SalesQty;
            salesLine.setInventDeliverNow();
            salesLine.RemainSalesPhysical   = salesLine.SalesQty;
            salesLine.RemainInventPhysical  = salesLine.QtyOrdered;
            salesLine.SalesPrice            = salesLineStaging.SalesPrice;
            salesLine.LineAmount            = salesLine.calcLineAmount(salesLine.SalesQty);
            //SalesLine.Name              = strfmt("%1 %2", SalesLine.Name, _name);

            if (!salesLine.lineNum)
            {
                salesLine.lineNum = numLines;
            }
            DEV::validateWriteRecordCheck(salesLine);

            salesLine.createLine(true,false,false,true);

        }       

        ttscommit;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDataFromStaging</Name>
				<Source><![CDATA[
    void validateDataFromStaging()
    {

        boolean  isValidLine;
        int      numLines;
        ;
        messageProcessResult.clearValues();

        if (! CustTable::exist(salesTableStaging.CustAccount))
        {
            checkFailed(strFmt("Customer %1 doesn't exist", salesTableStaging.CustAccount));
            messageProcessResult.incErrorCount();
        }
        while select salesLineStaging
            order by RecId
            where salesLineStaging.MessageId ==  salesTableStaging.MessageId
        {
            isValidLine = true;
            numLines++;

            if (! InventItemBarcode::findInputBarcode(salesLineStaging.ItemBarCode) &&
                 ! InventTable::exist(salesLineStaging.ItemBarCode) )
            {
                isValidLine = checkFailed(strFmt("Line %1. Barcode %2 doesn't exist", numLines,
                                                                                   salesLineStaging.ItemBarCode));
            }
            
            if (! isValidLine)
            {
                messageProcessResult.incErrorCount();
            }
            else
            {
                messageProcessResult.incProcessedCount();
            }
        }
        if (messageProcessResult.hasErrors())
        {
            throw error(strFmt("Message %1 has %2 validation errors", messageTable.Name, messageProcessResult.getErrorCount()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFileToStaging</Name>
				<Source><![CDATA[
    void readFileToStaging()
    {
        DEVIntegTutorialSOHeaderContract        tutorialSOHeaderContract ;
        DEVIntegTutorialSOHeaderLinesContract   tutorialSOHeaderLinesContract;
        
        str serializedJSONstr;
        if (messageTable.messageTypeTable().isFileBasedConnection())
        {
            System.IO.MemoryStream  fileStream = messageTable.getFileStream();
            if (! fileStream)
            {
                throw error(strFmt("File %1 is empty", messageTable.Name));
            }
            System.IO.StreamReader reader = new System.IO.StreamReader(fileStream);
            serializedJSONstr = reader.ReadToEnd();

        }
        else
        {
            serializedJSONstr = messageTable.getDataString();
        }
        if (! serializedJSONstr)
        {
            throw error(strFmt("Message %1 is empty", messageTable.Name));
        }
        tutorialSOHeaderContract = FormJsonSerializer::deserializeObject(classNum(DEVIntegTutorialSOHeaderContract), serializedJSONstr);

        ttsbegin;
        int lineNum;

        salesTableStaging = null;
        salesTableStaging.CompanyId        = tutorialSOHeaderContract.parmCompanyId();
        salesTableStaging.CustAccount      = tutorialSOHeaderContract.parmCustomerId();
        salesTableStaging.ExternalOrderId  = tutorialSOHeaderContract.parmExternalOrderNumber();
        salesTableStaging.MessageId        = messageTable.RecId;

        DEV::validateWriteRecordCheck(salesTableStaging);
        salesTableStaging.insert();

        List            linesList = tutorialSOHeaderContract.parmLines();
        ListEnumerator  le;

        if (linesList && linesList.elements())
        {
            le = linesList.getEnumerator();
            while(le.moveNext())
            {
                tutorialSOHeaderLinesContract = le.current();

                salesLineStaging.clear();
                lineNum++;
                //salesLineStaging.LineNumber     = lineNum;
                salesLineStaging.MessageId   = salesTableStaging.MessageId;
                salesLineStaging.ItemBarCode = tutorialSOHeaderLinesContract.parmLineItemBarcode();
                salesLineStaging.SalesPrice  = tutorialSOHeaderLinesContract.parmLinePrice();
                salesLineStaging.SalesQty    = tutorialSOHeaderLinesContract.parmLineQuantity();
                
                DEV::validateWriteRecordCheck(salesLineStaging);
                salesLineStaging.insert();
            }
        }

        if (! lineNum)
        {
            throw error(strFmt("Message %1 is empty", messageTable.Name));
        }
        messageTable = DEVIntegMessageTable::findRecId(messageTable.RecId, true);
        messageTable.IsParsed = true;
        messageTable.update();

        ttscommit;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewStagingButton</Name>
				<Source><![CDATA[
    public void setViewStagingButton(FormFunctionButtonControl  _viewStagingButtonControl, DEVIntegMessageTable  _messageTable)
    {
        _viewStagingButtonControl.visible(_messageTable.IsParsed);
        _viewStagingButtonControl.menuItemName(menuItemDisplayStr(DEVIntegTutorialSalesTableStaging));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public str getDescription()
    {
        return "Sales order import JSON sample";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>