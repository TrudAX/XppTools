<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DEVIntegTutorialWebSalesProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/*
[
  {
    "id": 79,
    "purchId": "PO-001",
    "orderAccount": "ACCT-001",
    "updatedAt": "2025-02-17T03:10:46.7581442",
    "lines": [
      {
        "id": 142,
        "purchId": "PO-001",
        "itemId": "M0001",
        "quantity": 16,
        "lineAmount": 100
      },
      {
        "id": 143,
        "purchId": "PO-001",
        "itemId": "M0004",
        "quantity": 5,
        "lineAmount": 75
      }
    ]
  },
*/


using Newtonsoft.Json.Linq;
public class DEVIntegTutorialWebSalesProcess   extends DEVIntegProcessMessageBase
{
    DEVIntegTutorialWebSalesTableStaging      salesTableStaging;
    DEVIntegTutorialWebSalesLineStaging       salesLineStaging;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processMessage</Name>
				<Source><![CDATA[
    void  processMessage(DEVIntegMessageTable  _messageTable, DEVIntegMessageProcessResult _messageProcessResult)
    {
        
        messageTable         =  _messageTable;
        messageProcessResult =  _messageProcessResult; 
 
        //this is a main message
        if (! messageTable.ParentMessageId)
        {
            this.deleteChildMessages();

            messageProcessResult.parmProcessPrefix("ReadFileToStaging");
            this.readFileToStaging();
        }
        else
        {
            select forupdate salesTableStaging
                where salesTableStaging.MessageId == _messageTable.RecId;

            if (! salesTableStaging.RecId || ! messageTable.IsParsed)
            {
                throw error(strFmt("No data attached to the child record, reprocess the main message %1", messageTable.ParentMessageId));
                
            }
            ttsbegin;
            messageProcessResult.parmProcessPrefix("ValidateDataFromStaging");
            this.validateDataFromStaging();
            ttscommit;
        
            messageProcessResult.parmProcessPrefix("CreateDataFromStaging");
            this.createDataFromStaging();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFileToStaging</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPCheckInsertMethodInLoop', 'insert method should be called')]
    void readFileToStaging()
    {
        JArray  loads = JArray::Parse(messageTable.getDataString());
        
        if (! loads)
        {
            throw error(strFmt("Message %1 is empty", messageTable.Name));
        }
        
        ttsbegin;
        
        JToken load = loads.First;
                    
        while (load)
        {
            DEVIntegJObject result = DEVIntegJObject::Parse(load.ToString());
                
            if (result )
            {
                messageProcessResult.parmProcessPrefix(strFmt("Web order %1", result.GetValueString('id')));

                salesTableStaging               = null;
                salesTableStaging.MessageId     =  this.initChildMessage(true).RecId;
                salesTableStaging.CompanyId     = curExt();
                salesTableStaging.Identifier    = result.GetValueString('id');
                salesTableStaging.UpdatedAt     = result.getValueDateTime('updatedAt', 'YYYY-MM-DDThh:mm:ss.fffffff');
                salesTableStaging.ExternalAccount = result.GetValueString('orderAccount');
                salesTableStaging.ExternalNumber  = result.GetValueString('purchId');

                if (! salesTableStaging.checkNewerRecordExist(true))
                {
                    JArray specs = result.GetValueArray('lines');

                    if (specs)
                    {
                        JToken line = specs.First;

                        while (line)
                        {
                            DEVIntegJObject lineJSON = DEVIntegJObject::ParseToken(line);

                            salesLineStaging             = null;
                            salesLineStaging.MessageId   = salesTableStaging.MessageId;
                            salesLineStaging.ItemBarCode = lineJSON.GetValueString('itemId');
                            salesLineStaging.SalesQty    = lineJSON.GetValueReal('quantity');
                            salesLineStaging.SalesPrice  = lineJSON.GetValueReal('lineAmount');

                            DEV::validateWriteRecordCheck(salesLineStaging);
                            salesLineStaging.insert();

                            line = line.Next;
                        }  
                    }
                    DEV::validateWriteRecordCheck(salesTableStaging);
                    salesTableStaging.insert();

                    this.deleteErrorStaging();

                    messageProcessResult.incProcessedCount();
                }
                else
                {
                    messageProcessResult.incSkippedCount();
                }
            }

            load = load.Next;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteErrorStaging</Name>
				<Source><![CDATA[
    //remove the existing error messages for the same order
    void deleteErrorStaging()
    {
        DEVIntegTutorialWebSalesTableStaging linesStagingError;
        DEVIntegMessageTable                 messageTableLocal;

        while select forupdate messageTableLocal
        exists join linesStagingError
            where linesStagingError.Identifier == salesTableStaging.Identifier
               && linesStagingError.UpdatedAt  <=  salesTableStaging.UpdatedAt
               && linesStagingError.RecId      != salesTableStaging.RecId
               && messageTableLocal.RecId == linesStagingError.MessageId
        {
            if (messageTableLocal.isProcessEnabled())
            {
                messageTableLocal.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDataFromStaging</Name>
				<Source><![CDATA[
    void validateDataFromStaging()
    {

        boolean  isValidLine;
        int      numLines;
        ;
        messageProcessResult.clearValues();

        salesTableStaging.CustAccount = DEVIntegMappingTable::getOurCodeByExtCode(DEVIntegMappingType::TutorialCustCodes, 
                                        salesTableStaging.ExternalAccount);

        if (! CustTable::exist(salesTableStaging.CustAccount))
        {
            checkFailed(strFmt("Customer %1 doesn't exist", salesTableStaging.CustAccount));
            messageProcessResult.incErrorCount();
        }
        while select salesLineStaging
            order by RecId
            where salesLineStaging.MessageId ==  salesTableStaging.MessageId
        {
            isValidLine = true;
            numLines++;

            if (! InventItemBarcode::findInputBarcode(salesLineStaging.ItemBarCode) &&
                 ! InventTable::exist(salesLineStaging.ItemBarCode) )
            {
                
                isValidLine = checkFailed(strFmt("Line %1. Barcode %2 doesn't exist", numLines,
                                                                                   salesLineStaging.ItemBarCode));
            }
            
            if (! isValidLine)
            {
                messageProcessResult.incErrorCount();
            }
            else
            {
                messageProcessResult.incProcessedCount();
            }
        }
        if (messageProcessResult.hasErrors())
        {
            throw error(strFmt("Message %1 has %2 validation errors", messageTable.Name, messageProcessResult.getErrorCount()));
        }
        salesTableStaging.selectForUpdate(true);
        salesTableStaging.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataFromStaging</Name>
				<Source><![CDATA[
    void createDataFromStaging()
    {
        ttsbegin;
        
        SalesTable                              salesTable;
        DEVIntegTutorialWebSalesTableStaging    salesTableStagingPrev;
        
    
        //do we have the same order
        select firstonly forupdate salesTable
            where salesTable.CustAccount   == salesTableStaging.CustAccount &&
                  salesTable.CustomerRef   == salesTableStaging.Identifier;

        if (! salesTable.RecId)
        {
            this.addSales();
            messageProcessResult.incProcessedCount();
        }
        else
        {
            //checking the updatedAt for the current order. Better to add this field into salesTable
            select firstonly salesTableStagingPrev
                order by UpdatedAt desc
                where salesTableStagingPrev.SalesId == salesTable.SalesId;
            if (salesTableStagingPrev && salesTableStagingPrev.UpdatedAt < salesTableStaging.UpdatedAt)
            {
                //In the current import we have more newer data, so need to delete/reverse the old one and create the new one
                DEV::validateDeleteRecordCheck(salesTable);
                salesTable.delete();

                this.addSales();
                messageProcessResult.incProcessedCount();
            }
            else
            {
                messageProcessResult.incSkippedCount();
                info(strFmt("There is already Sales order %1 with Web ID %2 that has a Updated date %3 more or equal than %4. Line will be skipped.",
                       salesTable.SalesId, salesTable.CustomerRef, salesTableStagingPrev.UpdatedAt, salesTableStaging.UpdatedAt));
            }
        }
    
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>addSales</Name>
				<Source><![CDATA[
    protected SalesTable addSales()
    {
        setPrefix(strFmt("Web sales ID '%1'", salesTableStaging.Identifier));
        SalesTable                      salesTable;
        SalesLine                       salesLine;

        int                     numLines;

        ttsbegin;

        while select salesLineStaging
            order by RecId
            where salesLineStaging.MessageId ==  salesTableStaging.MessageId
        {
            numLines++;
            if (!salesTable.RecId)
            {
                salesTable.initValue(SalesType::Sales);
                salesTable.SalesId              = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
                salesTable.CustAccount          = salesTableStaging.CustAccount;
                salesTable.CustomerRef          = salesTableStaging.Identifier;
                salesTable.PurchOrderFormNum    = salesTableStaging.ExternalNumber;
                salesTable.initFromCustTable();

                DEV::validateWriteRecordCheck(salesTable);
                salesTable.insert();

            }
            InventItemBarcode  inventItemBarcode = InventItemBarcode::findInputBarcode(salesLineStaging.ItemBarCode);
            if (inventItemBarcode.RecId) //just for testing
            {
                salesLineStaging.ItemId = inventItemBarcode.ItemId;
            }
            else
            {
                salesLineStaging.ItemId = salesLineStaging.ItemBarCode;
            }
            salesLineStaging.selectForUpdate(true);
            salesLineStaging.update();

            salesLine.clear();
            salesLine.initValue();
            salesLine.ItemId = salesLineStaging.ItemId;
            salesLine.initFromSalesTable(salesTable);
            salesLine.initFromInventTable(InventTable::find(salesLine.ItemId));
            salesLine.SalesQty              = salesLineStaging.SalesQty;
            salesLine.QtyOrdered            = SalesLine.calcQtyOrdered();
            salesLine.SalesDeliverNow       = salesLine.SalesQty;
            salesLine.setInventDeliverNow();
            salesLine.RemainSalesPhysical   = salesLine.SalesQty;
            salesLine.RemainInventPhysical  = salesLine.QtyOrdered;
            salesLine.SalesPrice            = salesLineStaging.SalesPrice;
            salesLine.LineAmount            = salesLine.calcLineAmount(salesLine.SalesQty);
            //SalesLine.Name              = strfmt("%1 %2", SalesLine.Name, _name);

            if (!salesLine.lineNum)
            {
                salesLine.lineNum = numLines;
            }
            DEV::validateWriteRecordCheck(salesLine);

            salesLine.createLine(true,false,false,true);

        }

        salesTableStaging.selectForUpdate(true);
        salesTableStaging.SalesId = salesTable.SalesId;
        salesTableStaging.update();

        this.updateDocumentDescription(salesTable.SalesId);
        ttscommit;
        info(strFmt("Sales order %1 created", salesTable.SalesId));

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setViewStagingButton</Name>
				<Source><![CDATA[
    public void setViewStagingButton(FormFunctionButtonControl  _viewStagingButtonControl, DEVIntegMessageTable  _messageTable)
    {
        _viewStagingButtonControl.visible(_messageTable.IsParsed);
        _viewStagingButtonControl.menuItemName(menuItemDisplayStr(DEVIntegTutorialWebSalesTableStaging));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomLoadType</Name>
				<Source><![CDATA[
    public DEVIntegMessagesLoadBaseType getCustomLoadType()
    {
        return new DEVIntegTutorialWebSalesLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVisibleInboundMessageFields</Name>
				<Source><![CDATA[
    public container getVisibleInboundMessageFields()
    {
        container c = super();

        c += [fieldNum(DEVIntegMessageTypeInbound, LastLoadDateTime), 
              fieldNum(DEVIntegMessageTypeInbound, LastLoadOverlapSec),
              fieldNum(DEVIntegMessageTypeInbound, IsIgnoreFirstMessageProcessOnLoad)
            //use the following fields if you want to implement pagination
             , fieldNum(DEVIntegMessageTypeInbound, LastLoadOffset),
              fieldNum(DEVIntegMessageTypeInbound, LastLoadLimit)

            ];

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public str getDescription()
    {
        return "Tutorial Import Web Sales orders";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>